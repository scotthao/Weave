<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" 
				xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:ui="weave.ui.*" implements="weave.api.ui.IVisToolWithSelectableAttributes"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeyFilter;
			import weave.api.getSessionState;
			import weave.api.setSessionState;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.api.ui.IVisTool;
			import weave.core.CallbackJuggler;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.NumberDataFilter;
			import weave.data.KeySets.StringDataFilter;
			import weave.utils.ColumnUtils;
			import weave.utils.EditorManager;
			
			WeaveAPI.registerImplementation(IVisTool, DataFilter, "Data Filter");

			private var _editor:ILinkableObjectEditor;
			private var _globalName:String;
			private const _filterJuggler:CallbackJuggler = new CallbackJuggler(this, handlePanelTitleChange, true);
			
			private function get globalName():String
			{
				return _globalName || (_globalName = Weave.root.getName(this));
			}
			
			private function get keyFilter():IKeyFilter
			{
				return Weave.defaultSubsetKeyFilter.filters.getObject(globalName) as IKeyFilter;
			}
			
			private function get filterColumn():IAttributeColumn
			{
				var kf:IKeyFilter = keyFilter;
				var ndf:NumberDataFilter = kf as NumberDataFilter;
				var sdf:StringDataFilter = kf as StringDataFilter;
				return ((ndf && ndf.column) || (sdf && sdf.column)) as IAttributeColumn;
			}
			
			override protected function constructor():void
			{
				super.constructor();
				enableSubMenu.value = true;
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				subMenu.addSubMenuItem(lang("String filter"), setFilterType, [StringDataFilter]);
				subMenu.addSubMenuItem(lang("Number filter"), setFilterType, [NumberDataFilter]);
				
				Weave.defaultSubsetKeyFilter.filters.childListCallbacks.addImmediateCallback(this, handleFilters, true);
				if (!keyFilter)
					setFilterType(StringDataFilter);
			}
			
			override public function dispose():void
			{
				Weave.defaultSubsetKeyFilter.filters.removeObject(globalName);
				super.dispose()
			}
			
			private function setFilterType(type:Class):void
			{
				var state:Object = filterColumn && getSessionState(filterColumn);
				Weave.defaultSubsetKeyFilter.filters.requestObject(globalName, type, false) as IKeyFilter;
				if (filterColumn && state)
					setSessionState(filterColumn, state);
			}
			
			private function handleFilters():void
			{
				if (Weave.defaultSubsetKeyFilter.filters.childListCallbacks.lastNameRemoved == globalName)
				{
					if (_editor && _editor.parent == this)
						this.removeChild(_editor as DisplayObject);
					_editor = null;
				}
				
				var filter:IKeyFilter = keyFilter;
				if (filter && !_editor)
				{
					_editor = EditorManager.getNewEditor(filter);
					addChild(_editor as DisplayObject);
				}
				_filterJuggler.target = filter;
			}
			
			override protected function get defaultPanelTitle():String
			{
				if (filterColumn)
					return lang('Filter for {0}', ColumnUtils.getTitle(filterColumn));
				
				return lang('Filter');
			}
			
			public function getSelectableAttributeNames():Array
			{
				return filterColumn ? [lang('Filter')] : [];
			}
			
			public function getSelectableAttributes():Array
			{
				return filterColumn ? [filterColumn] : [];
			}
		]]>
	</mx:Script>
</DraggablePanel>
