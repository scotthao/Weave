<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author fkamayou
@author mervetuccar
@author hbyrne
-->

<ControlPanel xmlns="weave.ui.*"
			  xmlns:mx="http://www.adobe.com/2006/mxml"
			  xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
			  width="400" height="400" backgroundColor="#EFF4BC" horizontalScrollPolicy="off"
			  implements="weave.api.core.ILinkableObject" sessionPanelCoordsAsPercentages="false"
			  title="Disability Options" verticalScrollPolicy="off">
	<mx:HDividedBox id="disabilityOptions" width="100%" height="100%" paddingBottom="{padding}"
					paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}">
		
		<mx:TabNavigator height="100%" borderStyle="inset">
			
			<mx:VBox width="100%" height="100%" label="General Description" horizontalAlign="left"
					 verticalAlign="top">
				<mx:TextInput id="generalDescriptionTextInputBox" width="80%" height="30%"
							  backgroundColor="#EEEEEE" editable="true" horizontalCenter="true"
							  text="Weave Instance."
							  toolTip="Enter a general desciption of your visualizations."/>
			</mx:VBox>
			
			<mx:VBox width="100%" height="100%" label="Detailed Description" horizontalAlign="left"
					 verticalAlign="top">

				<mx:TextInput id="detailedDescriptionTextInputBox" width="80%" height="30% "
							  backgroundColor="#EEEEEE" enabled="true" horizontalCenter="true"
							  toolTip="Enter a more detailed description."/>
				
				<mx:Button label="Refresh Visualizations" click="updateCheckBoxes()" paddingLeft="2"
						   paddingRight="2" toolTip="Refresh the list of visualizations"/>				
				<mx:VBox id="menuToggleVBox" verticalScrollPolicy="on">
				</mx:VBox>
					
			</mx:VBox>
				
			<mx:VBox width="100%" height="100%" label="Alt Text" horizontalAlign="left"
					 verticalAlign="top">

				<mx:CheckBox id="useGeneralDescriptionCheckBox" toolTip="Add the general description to the Alt Text"
							 label="General Description" selected="true"
							 creationComplete="linkBindableProperty(useGeneralDescription, event.target, 'selected')"/>
				<mx:CheckBox id="useDetailedDescriptionCheckBox" toolTip="Add the detailed description to the Alt Text"
							 label="Detailed Description"
							 creationComplete="linkBindableProperty(useDetailedDescription, event.target, 'selected')"/>
				<mx:TextArea id="AltTextTextArea" width="80%" height="50%"
							 backgroundColor="#EEEEEE" editable="false"
							 toolTip="This is the text that will be available for accessibility."/>
			</mx:VBox>
					
					<mx:Script>
						<![CDATA[
							import flash.external.ExternalInterface;
							
							import mx.accessibility.CheckBoxAccImpl;
							import mx.controls.CheckBox;
							import mx.controls.ComboBox;
							import mx.controls.List;
							import mx.controls.Menu;
							import mx.controls.TextArea;
							import mx.controls.TextInput;
							import mx.core.IUIComponent;
							import mx.events.DragEvent;
							import mx.events.FlexEvent;
							import mx.managers.DragManager;
							
							import weave.Weave;
							import weave.api.WeaveAPI;
							import weave.api.core.IDisposableObject;
							import weave.api.core.ILinkableObject;
							import weave.api.detectLinkableObjectChange;
							import weave.api.linkBindableProperty;
							import weave.api.linkSessionState;
							import weave.api.newDisposableChild;
							import weave.api.newLinkableChild;
							import weave.api.registerLinkableChild;
							import weave.api.reportError;
							import weave.api.ui.ILinkableObjectEditor;
							import weave.core.DynamicState;
							import weave.core.LinkableBoolean;
							import weave.core.LinkableHashMap;
							import weave.core.LinkableString;
							import weave.core.SessionManager;
							import weave.editors.Disability;
							import weave.ui.ControlPanel;
							import weave.ui.SessionStateEditor;
							
							
							private const useGeneralDescription:LinkableBoolean = new LinkableBoolean(false);
							private const useDetailedDescription:LinkableBoolean = new LinkableBoolean(false);
							
//							private const _generalDescription:LinkableString = new LinkableString("Weave instance");
//							private const _detailedDescription:LinkableString = new LinkableString();
							private const _AltText:LinkableString = new LinkableString();
							
							private const padding:int = 5;
							private var checkBoxArray:Array = [];
							private var _selectedCheckBox : CheckBox;
							private var _controlPanel:ControlPanel = null;
							private var panel:DraggablePanel;
						
							private var _description:String = "";
							private var _selectedCheckBoxLabelArray : Array = [];
							
							override protected function constructor():void
							{
								super.constructor();
								
								panelWidth.value = "70%";
								panelHeight.value = "70%";
								panelX.value = "15%";
								panelY.value = "15%";
								
							}
						
							override protected function childrenCreated():void
							{
								super.childrenCreated();
								
//								linkBindableProperty(Weave.properties.disabilityAltText, _altText.value, "text");
								//		linkBindableProperty(Weave.properties.disabilitySystemText, automaticToolDescTextBox, "text");
								Weave.properties.disabilityAltText.addImmediateCallback(this, handleDisabilityAltTextChange);
								useGeneralDescription.addImmediateCallback(this, handleAltText);
								useDetailedDescription.addImmediateCallback(this, handleAltText);
								updateCheckBoxes();	
								addEventListener(FlexEvent.SHOW, panelRemovedEventHandler);	
								Weave.properties.disabilityHashMap.addDisposeCallback(label, updateCheckBoxes);
								
								
							}
							protected function handleDisabilityAltTextChange() : void
							{
								ExternalInterface.call("getAltText()");
									  
							}
						
							
							protected function panelRemovedEventHandler(event:Event):void
							{	
								var Name : String = WeaveAPI.getRegisteredImplementationDisplayName(event.currentTarget as Class) || getQualifiedClassName(event.currentTarget).split(':').pop();
								
								updateCheckBoxes();		
							}
							
							private function updateCheckBoxes():void
							{
								
								var panels:Array = [];
								var checkBox:CheckBox   = null;
								checkBoxArray = [];
								panels = getWindowsOnStage();
								
								menuToggleVBox.removeAllChildren();
								
								// we could use panel on stage but might not be necessary
								for each(var panel:DraggablePanel in Weave.root.getObjects(DraggablePanel))
								{
									
									checkBox = new CheckBox();
									checkBox.label=panel.title;
									checkBox.toolTip = "Checking this box appends its description to the advanced description";
									checkBoxArray.push(checkBox);
									
								}             
								
								checkBoxArray.sortOn('label');
								for each (checkBox in checkBoxArray)
								{
									menuToggleVBox.addChild(checkBox);
								}
								
							}
							
							protected function handleAltText():void
							{
								if (useGeneralDescription.value)
								{
									if(useDetailedDescription.value)
									{
										Weave.properties.disabilityAltText.value = generalDescriptionTextInputBox.text + " " + detailedDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									} else
									{
										Weave.properties.disabilityAltText.value = generalDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									}
								} else
								{
									if(useDetailedDescription.value)
									{
										Weave.properties.disabilityAltText.value = detailedDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									} else
									{
										Weave.properties.disabilityAltText.value = "";
										AltTextTextArea.text ="";
									}
								}
							}
					
							private function getWindowsOnStage(): Array
							{
								var panels:Array = Weave.root.getObjects(DraggablePanel);
								var panelsOnStage:Array = [];
								
								for each (var panel:DraggablePanel in panels)
								{
									if (!panel.minimized.value)
										panelsOnStage.push(panel);
									
								}
								
								return panelsOnStage;
							}
							
						]]>
					</mx:Script>	
		</mx:TabNavigator>
	</mx:HDividedBox>
</ControlPanel>