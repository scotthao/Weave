<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
	@author skolman
	@author adufilie
-->

<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml"
		direction="horizontal"
		width="100%" height="100%"
		implements="weave.api.core.ILinkableObject, weave.api.core.IDisposableObject">
	<!--<mx:Label id="compiledObjectName" fontWeight="bold" text=""/>
	<mx:TextInput id="compiledObjectParams" text=""/>
	-->
	<mx:VBox verticalGap="0">
		<mx:Image click="handleCloseButtonClick(event)" id="closeButton" source="@Embed(source='/weave/resources/images/cancel_small.png')" alpha="0.5" toolTip="{lang('Erase this part of the equation.')}"/>
		<mx:Image mouseDown="handleEditButtonClick(event)" id="editButton" source="@Embed(source='/weave/resources/images/pencil.png')" alpha="0.5" toolTip="{lang('Expand or collapse this part of the equation.')}"/>
	</mx:VBox>
	<mx:VBox id="equationStringContainer"/>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Label;
			import mx.controls.List;
			import mx.controls.TextInput;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import weave.api.core.ILinkableObject;
			import weave.api.disposeObjects;
			import weave.api.newLinkableChild;
			import weave.compiler.CompiledFunctionCall;
			import weave.compiler.ICompiledObject;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.EquationColumn;

			private static const UNDEFINED:String = 'undefined';
			
			public function dispose():void
			{
				setStyle('borderColor',0x0000FF);
				removeAllEquationChildren();
			}
			
			public const equation:LinkableString = newLinkableChild(this, LinkableString, handleEquationChange);
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				closeButton.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOverCloseButton);
				closeButton.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOutCloseButton);
				
				this.addEventListener(DragEvent.DRAG_ENTER,handleDragEnter);
				this.addEventListener(DragEvent.DRAG_DROP,handleDragDrop);
				this.addEventListener(DragEvent.DRAG_EXIT,handleDragExit);
			}
			
			private function handleMouseOverCloseButton(event:MouseEvent):void
			{
				closeButton.alpha = 1.0;
			}
			
			private function handleMouseOutCloseButton(event:MouseEvent):void
			{
				closeButton.alpha = 0.5;
			}
			
			private function handleCloseButtonClick(event:MouseEvent):void
			{
				equation.value = UNDEFINED;
			}
			
			private function handleEditButtonClick(event:MouseEvent):void
			{
				equation.value = extractEquationString();
				if (equationStringContainer.getChildren().length == 1)
					loadEquationString(true);
				else
					loadEquationString(false);
			}
			
			private function loadEquationString(enableFunctionView:Boolean=true):void
			{
				if (!parent)
					return callLater(loadEquationString, arguments);
				
				var errorString:String = '';
				var compiledObject:ICompiledObject = null;
				try
				{
					compiledObject = EquationColumn.compiler.compileToObject(equation.value);
				}
				catch(e:Error)
				{
					errorString = e.message;
				}
				//add check for null or empty equation
				clearEquation();
				
				var compiledFunctionCall:CompiledFunctionCall = compiledObject as CompiledFunctionCall;
				
				// disable function view when appropriate
				// special case for get() in order to force drag-and-drop to replace the entire get function instead of the get function parameter
				if (!compiledFunctionCall ||
					!compiledFunctionCall.compiledParams ||
					compiledFunctionCall.compiledParams.length == 0 ||
					compiledFunctionCall.originalTokens ||
					EquationColumn.compiler.decompileObject(compiledFunctionCall.compiledMethod) == "get")
					enableFunctionView = false;
				
				if (enableFunctionView)
				{
					var openCompiledObjectName:Label = new Label();
					
					openCompiledObjectName.text = EquationColumn.compiler.decompileObject(compiledFunctionCall.compiledMethod);
					equationStringContainer.addChild(openCompiledObjectName);
					if (compiledFunctionCall.compiledParams.length > 0)
					{
						openCompiledObjectName.text += "(";
						for (var i:int = 0; i < compiledFunctionCall.compiledParams.length; i++)
						{
							var compiledObjectParams:EquationUIComponent = new EquationUIComponent();
							compiledObjectParams.equation.value = (EquationColumn.compiler.decompileObject(compiledFunctionCall.compiledParams[i]));
							compiledObjectParams.equation.addImmediateCallback(this, handleChildEquationChange); 
							equationStringContainer.addChild(compiledObjectParams);
							if (i < compiledFunctionCall.compiledParams.length - 1)
							{
								var comma:Label = new Label();
								comma.text = ",";
								equationStringContainer.addChild(comma);
							}
						}
						var closeCompiledObjectName:Label = new Label();
						closeCompiledObjectName.text = ")";
						equationStringContainer.addChild(closeCompiledObjectName);
					}
					else
					{
						openCompiledObjectName.text += "()";
					}
				}
				else
				{
					var compiledConstant:TextInput = new TextInput();
					compiledConstant.text = equation.value;
					compiledConstant.enabled = false;
					compiledConstant.setStyle("backgroundDisabledColor","#F5F4DA");
					compiledConstant.addEventListener(MouseEvent.MOUSE_DOWN,handleTextInputMouseDown);
					compiledConstant.addEventListener(FocusEvent.FOCUS_OUT,handleTextInputFocusOut);
					compiledConstant.addEventListener(KeyboardEvent.KEY_DOWN,handleReturnKeyPress);
					if (compiledObject == null)
						compiledConstant.errorString = errorString;
					equationStringContainer.addChild(compiledConstant);
				}
				this.errorString = errorString;
			}
			
			private function extractEquationString():String
			{
				var children:Array = equationStringContainer.getChildren();
				
				if (children.length == 0)
					return equation.value;
				var strings:Array = [];
				var i:int;
				for (i = 0; i < children.length; i++)
				{
					if (children[i] is Label || children[i] is TextInput)
					{
						strings.push(children[i].text == '' ? UNDEFINED : children[i].text);
					}
					else if (children[i] is EquationUIComponent)
					{
						strings.push((children[i] as EquationUIComponent).extractEquationString());
					}
				}
				
				var equationString:String;
				if (strings[0] == "\\;(")
				{
					// remove every other item (commas and parentheses)
					for (i = 0; i < strings.length; i++)
						strings.splice(i, 1);
					equationString = '{ ' + strings.join('; ') + ' }';
				}
				else
					equationString = strings.join('');
				
				// compile, then decompile so we will get the preferred syntax
				try {
					var compiledObject:ICompiledObject = EquationColumn.compiler.compileToObject(equationString);
					equationString = EquationColumn.compiler.decompileObject(compiledObject);
				} catch (e:Error) { }
				
				return equationString;
			}
			
			private function removeLastComma():void
			{
				var children:Array = equationStringContainer.getChildren();
				
				if(children[children.length-1] is Label)
				{
					var lastLabel:Label = children[children.length-1] as Label;
					
					lastLabel.text = lastLabel.text.substr(0,lastLabel.text.length-1);
				} 
			}
			
			public function clearEquation():void
			{
				if(equationStringContainer != null)
				{
					removeAllEquationChildren();
				}
			}
			
			private function handleTextInputMouseDown(event:MouseEvent):void
			{
				// only enable & select all if input isn't already enabled
				if (!(event.currentTarget as TextInput).enabled)
				{
					(event.currentTarget as TextInput).setFocus();
					(event.currentTarget as TextInput).setSelection(0,(event.currentTarget as TextInput).text.length);
					(event.currentTarget as TextInput).enabled = true;
				}
			}
			
			private function handleTextInputFocusOut(event:FocusEvent):void
			{
				(event.currentTarget as TextInput).enabled = false;
				equation.value = extractEquationString();
			}
			
			private function handleReturnKeyPress(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					(event.currentTarget as TextInput).enabled = false;
					equation.value = extractEquationString();
				}
			}
			
			private function handleDragEnter(event:DragEvent):void
			{
				var dropTarget:* = event.currentTarget;
				DragManager.acceptDragDrop(dropTarget);
				highlight();
			}
			
			public function replaceEquation(draggedItem:*):void
			{
				var currentEquationString:String = equation.value;
				if (draggedItem is String)
				{
					equation.value = draggedItem; 
				}
				else if (draggedItem.hasOwnProperty('name'))
				{
					var draggedCompiledEquation:ICompiledObject = getEquationFromItem(draggedItem);
					try
					{
						var compiledCurrentEquation:ICompiledObject = EquationColumn.compiler.compileToObject(currentEquationString);	
						if(draggedCompiledEquation is CompiledFunctionCall && (draggedCompiledEquation as CompiledFunctionCall).compiledParams.length !=0)
						{
							(draggedCompiledEquation as CompiledFunctionCall).compiledParams[0] = compiledCurrentEquation;
						}
					}
					catch(e:Error)
					{
						
					}
					equation.value = (EquationColumn.compiler.decompileObject(draggedCompiledEquation));
				}
			}
			
			private function handleDragDrop(event:DragEvent):void
			{
				event.stopPropagation();
				event.action = DragManager.COPY;
				
				if (event.draggedItem == null)
					replaceEquation((event.dragInitiator as List).selectedItem);
				else
					replaceEquation(event.draggedItem);
				removeHighlight();
			}
			
			private function handleDragExit(event:DragEvent):void
			{
				removeHighlight();
			}
			
			private function getEquationFromItem(item:Object):ICompiledObject
			{
				var functionStringFormat:String = item.name;
				if (item.hasOwnProperty('parameters')) // is method?
				{
					functionStringFormat += "(";
					
					var i:int = 0;
					for each(var parameterNode:Object in item.parameters)
					{
						//functionStringFormat += "param" + i.toString();
						if (i > 0)
							functionStringFormat += ", ";
						functionStringFormat += UNDEFINED;
						i++;
					}
					
					//functionStringFormat = functionStringFormat.substring(0,functionStringFormat.length-1);
					
					functionStringFormat += ")";
				}
				var equation:ICompiledObject = EquationColumn.compiler.compileToObject(functionStringFormat);
				
				return equation;
			}
			
			private function handleEquationChange():void
			{
				//trace("equation value is : " + equation.value);
				loadEquationString();
			}
			
			private function handleChildEquationChange():void
			{
				equation.value = extractEquationString();
			}
			
			private function highlight():void
			{
				this.setStyle("borderStyle","solid");
				this.setStyle("borderColor","red");
			}
			
			private function removeHighlight():void
			{
				this.setStyle("borderStyle","none");
			}
			
			// remove and dispose of all children
			private function removeAllEquationChildren():void
			{
				var children:Array = equationStringContainer.getChildren();
				for each (var child:UIComponent in children)
					child.validateNow(); // prevents application from crashing inside call to callLaterDispatcher().
				
				if (children.length > 0)
					(disposeObjects as Function).apply(null, children);
				equationStringContainer.removeAllChildren();
			}
		]]>
	</mx:Script>
</mx:Box>
