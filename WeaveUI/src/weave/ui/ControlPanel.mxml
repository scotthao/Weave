<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				backgroundColor="0xCCCCCC"
				addedToStage="handleAddedToStage();"
				width="640"
				height="480"
				sessionPanelCoordsAsPercentages="false"
				layout="vertical"
				escapeKeyClosesPanel="true"
				>
	<mx:Metadata>
		[DefaultProperty("children")]

	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.containers.TabNavigator;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableObject;
			import weave.api.getSessionState;
			import weave.api.newDisposableChild;
			import weave.api.setSessionState;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.core.ClassUtils;
			import weave.core.DynamicState;
			import weave.core.SessionManager;
			import weave.utils.EditorManager;
			

			private var _targetObjects:Array = null;
			private var _savedTargetSessionStates:Array;
			private var _savedGlobalSessionStates:Array;
			private var _savedGlobalNames:Object;
			private var createdChildren:Boolean = false;
			
			override protected function get borderIsVisible():Boolean
			{
				return true;
			}
			
			override public function set width(value:Number):void
			{
				super.width = value;
				if (!initialized)
					panelWidth.value = String(value);
			}
			
			override public function set height(value:Number):void
			{
				super.height = value;
				if (!initialized)
					panelHeight.value = String(value);
			}
			
			/**
			 * container for the Save, Revert, Cancel and Save &amp; Close buttons 
			 */
			protected var controlPanelControls:ControlPanelControls = new ControlPanelControls();
			
			public function get tabNavigator():TabNavigator
			{
				return controlPanelControls ? controlPanelControls.tabNavigator : null;
			}
			
			override public function set layout(value:String):void
			{
				super.layout = "vertical";
			}
			
			override protected function constructor():void
			{
				super.constructor();
				
				closeable.value = false;
				pinnable.value = false;
				minimizable.value = false;
				maximizable.value = false;
				
				// title is set here instead of in the mxml because otherwise it would
				// overwrite any other value set in mxml components based on this class.
				title = lang('Control Panel');
			}
			
			public function set children(array:Array):void
			{
				initialize();
				for (var i:int = 0; i < array.length; i++)
				{
					controlPanelControls.tabNavigator.addChild(array[i]);
				}
			}
			
			/**
			 * setter for _targetObjects
			 * @param Array an array of ILinkableObjects 
			 */
			public function set targets(array:Array):void
			{
				_targetObjects = array;
				
				controlPanelControls.busyIndicatorTargets = array;
				
				save();
				
				adjustControls();
			}
			
			private function adjustControls():void
			{
				if (!parent)
				{
					callLater(adjustControls);
					return;
				}
				
				// make sure controls are initialized before attempting to manipulate its children.
				controlPanelControls.initialize();
				controlPanelControls.validateNow();
				
				// show buttons if there are targets, hide them if not
				if (_targetObjects == null || _targetObjects.length == 0)
				{
					closeable.value = true;
					if (controlPanelControls == controlPanelControls.buttons.parent)
						controlPanelControls.removeChild(controlPanelControls.buttons);
				}
				else
				{
					closeable.value = false;
					if (controlPanelControls != controlPanelControls.buttons.parent)
						controlPanelControls.addChild(controlPanelControls.buttons);
				}
			}
			
			private function toggleRevertSaveButtons():void
			{
				var show:Boolean = Weave.properties.showRevertButton.value;
				controlPanelControls.revertBtn.visible = show;
				controlPanelControls.revertBtn.includeInLayout = show;
				controlPanelControls.saveBtn.visible = show;
				controlPanelControls.saveBtn.includeInLayout = show;
			}
			
			/**
			 * This function reverts session state(s) in targets to the previous state(s) set in save() 
			 */
			public function revert():void
			{
				if (!_targetObjects)
					return;
				var i:int = 0;
				for each(var object:ILinkableObject in _targetObjects)
				{
					if (!(WeaveAPI.SessionManager as SessionManager).objectWasDisposed(object))
						setSessionState(object, _savedTargetSessionStates[i++]); 
				}
				for each (var dynamicState:DynamicState in _savedGlobalSessionStates)
				{
					var classDef:Class = ClassUtils.getClassDefinition(dynamicState.className);
					var globalObject:ILinkableObject = Weave.root.requestObject(dynamicState.objectName, classDef, false);
					setSessionState(globalObject, dynamicState.sessionState);
				}
			}
			
			/**
			 * This function saves the session state(s) of all ILinkableObjects in _targetObjects 
			 * to a local Array <br/>
			 * If _targetObjects is null and a parent ILinkableObject exists, 
			 * the parent ILinkableObject's session state will be saved
			 */
			public function save():void
			{
				if (_targetObjects == null && parent is ILinkableObject)
				{
					targets = [parent]; // this calls save() again
					return;
				}
				if (tabNavigator)
					for each (var child:Object in tabNavigator.getChildren())
						if (child is ILinkableObjectEditor)
							(child as ILinkableObjectEditor).applyChanges();
				
				_savedGlobalNames = {};
				_savedGlobalSessionStates = [];
				_savedTargetSessionStates = [];
				for each(var object:ILinkableObject in _targetObjects)
				{
					if (object)
					{
						_savedTargetSessionStates.push(getSessionState(object));
						saveRelatedSessionStates(object);
					}
				}
			}
			
			private function saveRelatedSessionStates(object:ILinkableObject):void
			{
				var dynamicObjects:Array = WeaveAPI.SessionManager.getLinkableDescendants(object, ILinkableDynamicObject);
				if (object is ILinkableDynamicObject)
					dynamicObjects.unshift(object);
				for each (var dynamicObject:ILinkableDynamicObject in dynamicObjects)
				{
					// if the dynamic object references a global object by name...
					if (dynamicObject.internalObject && dynamicObject.globalName != null && !_savedGlobalNames[dynamicObject.globalName])
					{
						// avoid duplicate entries and infinite recursion
						_savedGlobalNames[dynamicObject.globalName] = true;
						// save the session state of the global object
						_savedGlobalSessionStates.push(
							new DynamicState(
								dynamicObject.globalName,
								getQualifiedClassName(dynamicObject.internalObject),
								getSessionState(dynamicObject.internalObject)
							)
						);
						saveRelatedSessionStates(dynamicObject.internalObject);
					}
				}
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				if (createdChildren)
					return;
				createdChildren = true;

				var children:Array = getChildren();
				removeAllChildren();
				
				addChild(controlPanelControls);
				controlPanelControls.addEventListener(FlexEvent.CREATION_COMPLETE, handleControlsCreated);
				
				controlPanelControls.initialize();
				for ( var i:int = 0; i < children.length; i++ )
				{
					controlPanelControls.tabNavigator.addChild(children[i]);
				}
				
				Weave.properties.showRevertButton.addImmediateCallback(this, toggleRevertSaveButtons, true);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
			}
			
			private function handleControlsCreated(e:FlexEvent):void
			{
				controlPanelControls.revertBtn.addEventListener(MouseEvent.CLICK,function (e:MouseEvent):void { revert() });
				controlPanelControls.cancelBtn.addEventListener(MouseEvent.CLICK, function (e:MouseEvent):void { revert(); removePanel(); });
				controlPanelControls.saveBtn.addEventListener(MouseEvent.CLICK, function (e:MouseEvent):void { save(); });
				controlPanelControls.saveCloseBtn.addEventListener(MouseEvent.CLICK, function (e:MouseEvent):void { save(); removePanel(); });
			}
			
			private function handleAddedToStage():void
			{
				var xMargin:Number = stage.stageWidth - width;
				var xRange:Number = Math.min(xMargin, 64);
				if (x < 0 || x > xMargin)
					panelX.value = String((xMargin - xRange)/2 + Math.random() * xRange);
				var yMargin:Number = stage.stageHeight - height;
				var yRange:Number = Math.min(yMargin, 64);
				if (y < 0 || y > yMargin)
					panelY.value = String((yMargin - yRange)/2 + Math.random() * yRange);
				
				if(xMargin < 0 || yMargin < 0)
					constrainAndSaveCoordinates();
				
				save();
			}
			
			override protected function handleEscapeKey():void
			{
				if (WeaveAPI.StageUtils.shiftKey)
					revert();

				super.handleEscapeKey();
			}
			
			public static function openEditor(linkableObject:ILinkableObject, targets:Array = null, initialSessionStates:Array = null):ILinkableObjectEditor
			{
				var editor:ILinkableObjectEditor = EditorManager.getNewEditor(linkableObject);
				if (editor)
				{
					var controlPanel:ControlPanel = newDisposableChild(linkableObject, ControlPanel);
					PopUpManager.addPopUp(controlPanel, WeaveAPI.topLevelApplication as DisplayObject);
					PopUpManager.centerPopUp(controlPanel);
					controlPanel.targets = targets || [linkableObject];
					if (initialSessionStates)
						controlPanel._savedTargetSessionStates = initialSessionStates;
					controlPanel.tabNavigator.addChild(editor as DisplayObject);
					controlPanel.panelTitle.value = "{tabNavigator.getChildAt(0).label}";
				}
				return editor;
			}
		]]>
	</mx:Script>
</DraggablePanel>
