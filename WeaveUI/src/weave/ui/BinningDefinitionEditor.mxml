<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author sanbalagan
@author adufilie
@author skolman
-->
<mx:HBox xmlns:ui ="weave.ui.*"
		 xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.*"
		 width="100%"
		 implements="weave.api.core.ILinkableObject"
		 verticalGap="2" paddingLeft="3" paddingRight="3" paddingBottom="3" creationPolicy="all">
		<mx:VBox borderStyle="solid" borderThickness="1" cornerRadius="10"
				  paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
			
			<mx:Label fontWeight="bold" text="{lang('Binning type:')}"/>
			<mx:RadioButtonGroup id="typeGroup" change="handleTypeRadio()"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="simpleRadio" label="{lang('Equally spaced')}" groupName="typeGroup" selected="true" width="100%" data="{_simple}"/>
				<ui:Indent enabled="{simpleRadio.selected}" label="{lang('Number of bins:')}" indent="{indent}">
					<mx:NumericStepper minimum="1" maximum="100" stepSize="1" id="numOfBins" width="{inputWidth}"/>
				</ui:Indent>
				<ui:HelpComponent label="{simpleRadio.label}">
					Example: If your data is between 0 and 100 and you specify 4 bins, the following bins will be created: [0,25] [25,50] [50,75] [75,100]
				</ui:HelpComponent>
			</mx:HBox>
			
			<mx:HRule width="100%"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="customRadio" label="{lang('Custom breaks')}" groupName="typeGroup" width="100%" data="{_customSplit}"/>
				<mx:TextInput enabled="{customRadio.selected}" id="splitValues" width="100%"/>
				<ui:HelpComponent label="{customRadio.label}">
					Enter comma-separated custom break values for dividing the data into bins.  Example: "0,50,100" will create two bins: [0,50] and [50,100]
				</ui:HelpComponent>
			</mx:HBox>
			
			<mx:HRule width="100%"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="quantileRadio" label="{lang('Quantile')}" groupName="typeGroup" width="100%" data="{_quantile}"/>
				<ui:Indent enabled="{quantileRadio.selected}" label="{lang('Reference quantile:')}" indent="{indent}">
					<mx:TextInput id="refQuantile" width="{inputWidth}"/>
				</ui:Indent>
				<ui:HelpComponent label="{quantileRadio.label}">
					Example: If you specify 0.25, four bins will be created that each contain 25% of your data in sorted order
				</ui:HelpComponent>
			</mx:HBox>
			
			<mx:HRule width="100%"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="equalIntervalRadio" label="{lang('Equal interval')}" groupName="typeGroup" width="100%" data="{_equalInterval}"/>
				<ui:IndentTextInput id="dataInterval" enabled="{equalIntervalRadio.selected}" label="{lang('Data interval:')}" indent="{indent}" inputWidth="{inputWidth}"/>
				<ui:HelpComponent label="{equalIntervalRadio.label}">
					Example: If your data is between 0 and 100 and you specify an interval of 25, four bins will be created: [0,25] [25,50] [50,75] [75,100]
				</ui:HelpComponent>
			</mx:HBox>
			
			<mx:HRule width="100%"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="sdRadio" label="{lang('Standard deviations')}" groupName="typeGroup" width="100%" data="{_stdDev}"/>
				<ui:HelpComponent label="{sdRadio.label}">
					Six bins will be created for standard deviations above and below the mean value.
				</ui:HelpComponent>
			</mx:HBox>
		
			<mx:HRule width="100%"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="jenksRadio" label="{lang('Natural Jenks Classification')}" groupName="typeGroup" selected="true" width="100%" data="{_jenks}"/>
				<ui:Indent enabled="{jenksRadio.selected}" label="{lang('Number of bins:')}" indent="{indent}">
					<mx:NumericStepper minimum="1" maximum="100" stepSize="1" id="numOfJenksClass" width="{inputWidth}"/>
				</ui:Indent>
				<ui:HelpComponent label="{jenksRadio.label}">
					The Jenks optimization method, also called the Jenks natural breaks classification method, is a data classification method designed to determine the best arrangement of values into different classes.
					... http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization
				</ui:HelpComponent>
			</mx:HBox>
			
			<mx:HRule width="100%"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="catRadio" label="{lang('All categories (string values)')}" groupName="typeGroup" width="100%" data="{_category}"/>
				<ui:HelpComponent label="{catRadio.label}">
					One bin will be created for each unique string value in the column.
				</ui:HelpComponent>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox width="100%" height="100%">
			<mx:DataGrid id="binNameEditor" draggableColumns="false" sortableColumns="false" width="100%" height="100%" minWidth="0" selectable="{overrideNamesCheckBox.selected}" editable="{overrideNamesCheckBox.selected}" itemEditEnd="handleItemEdited(event)" dataProvider="{gridSource}">
				<mx:columns>
					<mx:DataGridColumn headerText="{lang('Bin Names')}"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:CheckBox id="overrideNamesCheckBox" label="{lang('Edit and override names')}" change="handleOverrideCheckbox()"/>
		</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IBinningDefinition;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.data.BinningDefinitions.AbstractBinningDefinition;
			import weave.data.BinningDefinitions.CategoryBinningDefinition;
			import weave.data.BinningDefinitions.CustomSplitBinningDefinition;
			import weave.data.BinningDefinitions.EqualIntervalBinningDefinition;
			import weave.data.BinningDefinitions.NaturalJenksBinningDefinition;
			import weave.data.BinningDefinitions.QuantileBinningDefinition;
			import weave.data.BinningDefinitions.SimpleBinningDefinition;
			import weave.data.BinningDefinitions.StandardDeviationBinningDefinition;
			
			public const binnedColumn:BinnedColumn = newLinkableChild(this, BinnedColumn);
			
			private const indent:int = 120;
			private const inputWidth:int = 64;
			private const gridSource:ArrayCollection = new ArrayCollection();
			public const _simple:SimpleBinningDefinition = newLinkableChild(this, SimpleBinningDefinition);
			private const _customSplit:CustomSplitBinningDefinition = newLinkableChild(this, CustomSplitBinningDefinition);
			private const _quantile:QuantileBinningDefinition = newLinkableChild(this, QuantileBinningDefinition);
			private const _equalInterval:EqualIntervalBinningDefinition = newLinkableChild(this, EqualIntervalBinningDefinition);
			private const _stdDev:StandardDeviationBinningDefinition = newLinkableChild(this, StandardDeviationBinningDefinition);
			private const _category:CategoryBinningDefinition = newLinkableChild(this, CategoryBinningDefinition);
			private const _jenks:NaturalJenksBinningDefinition = newLinkableChild(this,NaturalJenksBinningDefinition);
			
			private function get overrideBinNames():LinkableString
			{
				var abstractDef:AbstractBinningDefinition = binnedColumn.binningDefinition.internalObject as AbstractBinningDefinition;;
				if (abstractDef)
					return abstractDef.overrideBinNames;
				return null;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				binnedColumn.addGroupedCallback(this, handleBinnedColumnChange, true);

				var delay:int = 500;
				linkBindableProperty(_simple.numberOfBins, numOfBins, 'value', delay);
				linkBindableProperty(_customSplit.splitValues, splitValues, 'text', delay);
				linkBindableProperty(_quantile.refQuantile, refQuantile, 'text', delay);
				linkBindableProperty(_equalInterval.dataInterval, dataInterval, 'text', delay);
				linkBindableProperty(_jenks.numOfBins,numOfJenksClass,'value',delay);
			}
			
			// called when a radio button is selected
			private function handleTypeRadio():void
			{
				// from the selected radio button, get the local binning definition
				var localDef:IBinningDefinition = typeGroup.selection.data as IBinningDefinition;
				// create a copy of the selected local binning definition
				binnedColumn.binningDefinition.requestLocalObjectCopy(localDef);
			}
			
			// called when the binned column changes
			private function handleBinnedColumnChange():void
			{
				if (typeGroup.numRadioButtons == 0) // this may be zero even if children are created.
				{
					callLater(handleBinnedColumnChange);
					return;
				}
				
				// find the radio button with the same binning definition type
				var def:IBinningDefinition = binnedColumn.binningDefinition.internalObject as IBinningDefinition;
				for (var i:int = 0; i < typeGroup.numRadioButtons; i++)
				{
					var radioButton:RadioButton = typeGroup.getRadioButtonAt(i);
					var localDef:IBinningDefinition = radioButton.data as IBinningDefinition;
					if (getQualifiedClassName(localDef) == getQualifiedClassName(def))
					{
						// link the session state, giving priority to the binned column binning definition
						linkSessionState(def, localDef);
						// select the radio button
						typeGroup.selection = radioButton;
						overrideNamesCheckBox.includeInLayout = overrideNamesCheckBox.visible = (radioButton != catRadio);
						break;
					}
				}
				
				// update bin names
				gridSource.source = binnedColumn.binningDefinition.getBinNames();
				if (overrideBinNames && overrideBinNames.value)
					overrideNamesCheckBox.selected = true;
				else
					overrideNamesCheckBox.selected = false;
			}
			
			// called when the 'bin name override' checkbox is clicked
			private function handleOverrideCheckbox():void
			{
				// when unchecked, erase existing override names
				if (!overrideNamesCheckBox.selected)
				{
					if (overrideBinNames)
						overrideBinNames.value = '';
					// clear any existing list selection
					binNameEditor.selectedIndex = -1;
				}
			}
			
			private function handleItemEdited(event:DataGridEvent):void
			{
				if (!overrideBinNames)
					return;

				var input:TextInput = binNameEditor.itemEditorInstance as TextInput;
				
				input.errorString = '';
				
				if (input.text == event.itemRenderer.data as String)
					return;
				
				if (binnedColumn.binningDefinition.getBinNames().indexOf(input.text) >= 0)
				{
					input.errorString = lang('Name already exists.');
					
					// don't save the new value
					event.preventDefault();
					return;
				}
				
				var source:Array = gridSource.source;
				var names:Array = WeaveAPI.CSVParser.parseCSV(overrideBinNames.value);
				if (names && names.length)
					names = names[0];
				else
					names = new Array(source.length);
				
				names[event.rowIndex] = input.text;
				
				overrideBinNames.value = WeaveAPI.CSVParser.createCSV([names]);
			}
		]]>
	</mx:Script>
</mx:HBox>
