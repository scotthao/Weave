<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*" layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.ColumnListComponent;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.PlotterUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.plotters.ParallelCoordinatesPlotter;
			import weave.visualization.plotters.TextGlyphPlotter;
			
			WeaveAPI.registerImplementation(IVisTool, LineChartTool, lang("Line Chart"));
			
			private var _plotter:ParallelCoordinatesPlotter = null;
			
			override protected function constructor():void
			{
				super.constructor();
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "80";
				
				// lock dynamic objects into place
				_plotter = initializePlotters(ParallelCoordinatesPlotter, true);
				// default axis values
				yAxisPlotter.tickCountRequested.value = 5;
				
				xAxisPlotter.setLabelFunction(_plotter.xAxisLabelFunction);
				yAxisPlotter.setLabelFunction(_plotter.yAxisLabelFunction);
				
				
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.lock();
				visualization.enableZoomAndPan.value = false;

				//This variable represents whether or not the tool is a 
				//lineChart(false) or parallelCoords(true)
				_plotter.normalize.value = false;
				_plotter.normalize.lock();
				
				addLabelLayer();
				
				linkSessionState(labelPlotter.zoomToSubset, _plotter.zoomToSubset);

				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxes);
				
				// BEGIN TEMPORARY SOLUTION
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginTopNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginRightNumber.addGroupedCallback(this, updateAxes);

				getCallbackCollection(_plotter).addGroupedCallback(this, updateAxes, true);
				// END TEMPORARY SOLUTION
				var self:* = this;
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void {
					if (_plotter.enableGroupBy.value)
						AttributeSelectorPanel.openToolSelector(self, labelPlotter.text);
					else
						AttributeSelectorPanel.openToolSelector(self, _plotter.yData);
				});
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void {
					if (_plotter.enableGroupBy.value)
						AttributeSelectorPanel.openToolSelector(self, _plotter.columns);
					else
						AttributeSelectorPanel.openToolSelector(self, _plotter.xData);
				});
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [];
				for (var i:int = 0; i < count; i++)
					columnsToInit.push(_plotter.columns.requestObject(null, DynamicColumn, false));
				if (columnsToInit.length > 0)
					initColumnDefaults.apply(null, columnsToInit);
				
				_plotter.columns.addGroupedCallback(this, updateProbeColumns, true);
				_plotter.xColumns.addGroupedCallback(this, updateProbeColumns,true);
				_plotter.xData.addGroupedCallback(this, updateFilterText);
				_plotter.xValues.addGroupedCallback(this, updateFilterText, true);
				
				linkSessionState(visualization.plotManager.marginRightNumber, labelPlotter.maxWidth);
			}

			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = _plotter.columns.getObjects(IAttributeColumn);
					visualization.additionalProbeColumns.unshift(labelPlotter.text, colorColumn);
					if(_plotter.usingXAttributes)
					{
						visualization.additionalProbeColumns = _plotter.xColumns.getObjects(IAttributeColumn);
						visualization.additionalProbeColumns.unshift(labelPlotter.text, colorColumn);
					}
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			/**
			 * This function generates a label equation using the current Label column and the plotter's filterColumn
			 * and makes it the new Label column
			 */
			private function updateLabelColumn():void
			{
				if(!_plotter.enableGroupBy.value) 
					return;
				if(!labelPlotter.text.getInternalColumn())
					return;
				if(ColumnUtils.getKeyType(labelPlotter.text) != ColumnUtils.getKeyType(_plotter.xData))
					return;
				if(labelPlotter.text.getInternalColumn() is EquationColumn)
					return;
				
				var labelColumn:DynamicColumn = new DynamicColumn();
				labelColumn.requestLocalObjectCopy(labelPlotter.text);
				
				var labelEquation:EquationColumn = labelPlotter.text.requestLocalObject(EquationColumn, false) as EquationColumn;
				labelEquation.delayCallbacks();
				labelEquation.variables.requestObjectCopy("labelColumn",labelColumn);
				labelEquation.variables.requestObjectCopy("keyColumn", _plotter.groupBy);
				labelEquation.setMetadata(ColumnMetadata.TITLE, ColumnUtils.getTitle(labelColumn) + lang("Equation"));
				labelEquation.equation.value = 'key = getAssociatedKeys(keyColumn, getKey())[0], getValueFromKey(labelColumn, key, String)';
				labelEquation.resumeCallbacks();
				/* 
				if(!_plotter.lineStyle.color.internalDynamicColumn)
					return;
				
				if(_plotter.lineStyle.color.internalDynamicColumn is EquationColumn)
					return;
				
				var color:DynamicColumn = new DynamicColumn();
				color.requestGlobalObject(Weave.DEFAULT_COLOR_COLUMN, ColorColumn, false);
				
				var equation:EquationColumn = colorColumn.requestLocalObject(EquationColumn, false) as EquationColumn;
				equation.variables.copyObject("colorColumn", color);
				equation.variables.copyObject("key", _plotter.keyColumn);
				equation.columnTitle = ColumnUtils.getTitle(color)+'Equation';
				equation.equation.value = 'key = getKeysFromValue(get("key"), getKey(), QKey)[0], getValueFromKey(get("colorColumn"), key, Number)';
				 */
			}
			
			private function updateFilterText():void
			{
				xValuesInput.text = WeaveAPI.CSVParser.createCSV([_plotter.getXValues()]);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				xAxisPlotter.axisLabelRelativeAngle.value = -45;
				xAxisPlotter.labelHorizontalAlign.value = BitmapText.HORIZONTAL_ALIGN_RIGHT;
				xAxisPlotter.labelVerticalAlign.value = BitmapText.VERTICAL_ALIGN_TOP;
				xAxisPlotter.labelDistanceIsVertical.value = false;
				
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.value = false;
				
				(labelComponent as DynamicColumnComponent).dynamicObject = labelPlotter.text;
				
				linkBindableProperty(labelPlotter.size.defaultValue,labelSizeSlider,"value");
				linkBindableProperty(labelPlotter.color.defaultValue, colorPicker, "selectedColor");

				linkBindableProperty(_plotter.alphaColumn.defaultValue, 		alphaSlider,		"value");
				linkBindableProperty(_plotter.shapeSize,  					shapeSizeSlider, 	"value");
				linkBindableProperty(_plotter.lineStyle.weight.defaultValue, thicknessSlider, 	"value");
				linkBindableProperty(_plotter.shapeToDraw, shapeCombo, "selectedItem");
				linkBindableProperty(_plotter.shapeBorderThickness, shapeBorderSizeSlider, "value");
				linkBindableProperty(_plotter.shapeBorderColor, shapeBorderColorPicker, "selectedColor");
				_plotter.curveType.addGroupedCallback(this, handleCurveType, true);
				function handleCurveType():void
				{
					curveCheckBox.selected = _plotter.curveType.value == ParallelCoordinatesPlotter.CURVE_DOUBLE;
				}
			}
			
			override public function getSelectableAttributeNames():Array
			{
				var names:Array = [lang("Color"), lang("Label")];
				if (_plotter.enableGroupBy.value)
					names.push(lang("Y Column"), lang("X Column"), lang("Group by"));
				else
					names.push(lang("Y Values"), lang("X Values"));
				
				return names;
			}
			override public function getSelectableAttributes():Array
			{
				var attrs:Array = [colorColumn, labelPlotter.text];
				if (_plotter.enableGroupBy.value)
					attrs.push(_plotter.yData, _plotter.xData, _plotter.groupBy);
				else
					attrs.push(_plotter.columns, _plotter.xColumns);
				return attrs;
			}
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			private function getColumnObjects():Array
			{
				return _plotter.xColumns.getObjects(IAttributeColumn);
			}
			
			private static const tempBounds:Bounds2D = new Bounds2D(); // reusable temporary object
			
			
			private function updateAxes():void
			{
				handlePanelTitleChange();
				
				var columns:Array = _plotter.columns.getObjects();
			
				// get bounds for y axis
				visualization.plotManager.zoomBounds.getDataBounds(tempBounds);
				tempBounds.xMax = tempBounds.xMin;
				
				yAxisPlotter.axisLineMinValue.value = tempBounds.yMin;
				yAxisPlotter.axisLineMaxValue.value = tempBounds.yMax;
			
				yAxisPlotter.axisLineDataBounds.copyFrom(tempBounds);
				
				if(_plotter.usingXAttributes)
				{
					xAxisPlotter.axisLineMinValue.value = tempBounds.xMin;
					xAxisPlotter.axisLineMaxValue.value = tempBounds.xMax;
					xAxisPlotter.axisLineDataBounds.copyFrom(tempBounds);
					xAxisPlotter.forceTickCount.value = false;
					xAxisPlotter.tickCountRequested.value = 10;
				}
				else
				{
					xAxisPlotter.tickCountRequested.value = Math.max(2, columns.length);
					xAxisPlotter.forceTickCount.value = true;
				
				}
				
				var xAxisName:String = '';
				var yAxisName:String = '';
				if (_plotter.enableGroupBy.value)
				{
					xAxisName = ColumnUtils.getTitle(_plotter.xData);
					yAxisName = ColumnUtils.getTitle(_plotter.yData);
				}
				xAxisPlotter.setSideAxisName(
					xAxisName,
					0,
					0, visualization.plotManager.marginBottomNumber.value - 3,
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				yAxisPlotter.setSideAxisName(
					yAxisName,
					-90,
					-visualization.plotManager.marginLeftNumber.value, 0,
					BitmapText.VERTICAL_ALIGN_TOP
				);

				xAxisPlotter.updateLabels();
				yAxisPlotter.updateLabels();			
			}
			
			override protected function get defaultPanelTitle():String
			{
				var columns:Array = _plotter.columns.getObjects();
				if (columns.length == 0)
					return lang('Line Chart');
				
				if (_plotter.enableGroupBy.value)
					return lang("Line Chart of {0} by {1}", ColumnUtils.getTitle(_plotter.yData), ColumnUtils.getTitle(_plotter.xData));
				
				var newTitle:String = lang("Line Chart of ");
				for (var i:int = 0; i < columns.length; i++)
				{
					if (i > 0)
						newTitle += lang(', ');
					newTitle += ColumnUtils.getTitle(columns[i]);
				}
				return newTitle;
			}
			
			private function handleCurveCheckBox():void
			{
				if (curveCheckBox.selected)
					_plotter.curveType.value = ParallelCoordinatesPlotter.CURVE_DOUBLE;
				else
					_plotter.curveType.value = ParallelCoordinatesPlotter.CURVE_NONE;
			}
			
			private var labelPlotter:TextGlyphPlotter = null ;
			private function addLabelLayer():void
			{
				var name:String = "label";
				labelPlotter = visualization.plotManager.plotters.requestObject(name, TextGlyphPlotter, true);
				var settings:LayerSettings = visualization.plotManager.getLayerSettings(name);
				settings.selectable.value = false;
				settings.selectable.lock();
				
				_plotter.columns.addImmediateCallback(this, updateColumns, true);
				_plotter.xColumns.addImmediateCallback(this, updateColumns, true);

				labelPlotter.xScreenOffset.value = 5;
				labelPlotter.hAlign.defaultValue.value = BitmapText.HORIZONTAL_ALIGN_LEFT;
				labelPlotter.hideOverlappingText.value = true;
				linkSessionState(labelPlotter.dataY, labelPlotter.sortColumn);
				labelPlotter.hack_setSingleKeySource(_plotter.filteredKeySet);
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateLabel, true);
			}
			private function updateLabel():void
			{
				labelPlotter.setDefaultTextFormat(LinkableTextFormat.defaultTextFormat);
			}
			
			private function updateColumns():void
			{
				var _columns:Array = _plotter.columns.getObjects();
				var _xattrObjects:Array = _plotter.xColumns.getObjects();
				
				if (_columns.length == 0)
				{
					labelPlotter.dataY.removeObject();
					labelPlotter.dataX.removeObject();
					return;
				}
				var lastColumn:IAttributeColumn;
				var repeat:Boolean = false;
				do
				{
					repeat = false;
					if( _columns.length == 0 )
						break;
					if(!_plotter.usingXAttributes)
					{
						var x:AlwaysDefinedColumn = labelPlotter.dataX.requestLocalObject(AlwaysDefinedColumn, false);
					    x.defaultValue.value = (_columns.length) - 1;
					}
						
					else
					{
						lastColumn= _xattrObjects.pop();
						labelPlotter.dataX.requestLocalObjectCopy(lastColumn as ILinkableObject);
					}
					
	
					lastColumn= _columns.pop();
					labelPlotter.dataY.requestLocalObjectCopy(lastColumn as ILinkableObject);
					repeat = ( labelPlotter.dataY.keys.length == 0);
				} while (repeat );

				if (labelPlotter.text.getInternalColumn() == null)
				{
					var headers:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
					for (var i:int = 0; i < headers.length; i++)
					{
						if (ColumnUtils.getKeyType(headers[i]) == ColumnUtils.getKeyType(lastColumn))
						{
							labelPlotter.text.requestLocalObjectCopy(headers[i]);
							break;
						}
					}
				}
			}
			
		]]>
	</mx:Script>
	<mx:Number id="controlsFontSize">10</mx:Number>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Data')}">
			<ui:DynamicColumnComponent visTool="{this}" label="{lang('Color')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = colorColumn" showLinkControl="false"/>
			<ui:DynamicColumnComponent visTool="{this}" label="{lang('Label')}" id="labelComponent"/>
<!--			<mx:TabNavigator width="100%" height="100%" creationPolicy="all"> -->
			<ui:ColumnListComponent visTool="{this}"  creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.columns"/>
<!--			<ui:ColumnListComponent visTool="{this}"  creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.xAttributeColumns"/>	
			</mx:TabNavigator>-->
			<mx:HBox>
				<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
							 toolTip="{lang('Checking this box makes all of the tool\'s attributes visible in this tool\'s probe tooltip')}"
							 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox id="VizControlsPanel" label="{lang('Appearance')}">
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Shape:')}" color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip="{lang('This controls what shape is used to indicate the data points on the axes.')}"/>
				<ui:CustomComboBox id="shapeCombo" dataProvider="{ParallelCoordinatesPlotter.shapesAvailable}"/>
				<mx:HBox enabled="{shapeCombo.selectedItem != ParallelCoordinatesPlotter.NO_SHAPE}" verticalAlign="middle">
					<mx:Label text="{lang('Size:')}"
							  color="0x000000" fontSize="{controlsFontSize}" 
							  toolTip="{lang('This controls the size of the shapes indicating the data points on the axes.')}"/>
					<mx:HSlider id="shapeSizeSlider"
								width="100%" 
								snapInterval="1"
								tickInterval="5"
								labels="{['0','5','10','15','20']}"
								minimum="0" maximum="20" 
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle">
				<mx:HBox
						enabled="{!(shapeCombo.selectedItem == ParallelCoordinatesPlotter.NO_SHAPE || 
						shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_CIRCLE ||
						shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_SQUARE ||
						shapeBorderSizeSlider.value == 0) }">
					<mx:Label text="{lang('Shape border color:')}" color="0x000000" fontSize="{controlsFontSize}"/>
					<mx:ColorPicker id="shapeBorderColorPicker"
									toolTip="{lang('This controls color of the border around the shape at each point.')}"/>
				</mx:HBox>
				
				<mx:HBox width="100%" verticalAlign="middle"
						enabled="{shapeCombo.selectedItem != ParallelCoordinatesPlotter.NO_SHAPE}">
					<mx:Label text="Thickness:" color="0x000000" fontSize="{controlsFontSize}" 
							  toolTip="{lang('This controls the border size of the shapes indicating the data points on the axes.')}"/>
					<mx:HSlider id="shapeBorderSizeSlider" 
								width="100%" 
								snapInterval="1"
								tickInterval="1" 
								labels="{['0', '1', '2', '3', '4', '5']}"
								minimum="0" maximum="5"
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Line Opacity:')}" toolTip="{lang('Use this control to see how transparent lines are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}"/>
				<mx:HSlider id="alphaSlider" 
							width="100%" 
							snapInterval="0.1"
							tickInterval="0.5" labels="{['0%', '50%', '100%']}"
							dataTipFormatFunction="{PlotterUtils.alphaSliderFormatFunction}"
							minimum="0.0" maximum="1.0" 
							liveDragging="true"/>
				<mx:Label text="{lang('Thickness:')}"/>
				<mx:HSlider id="thicknessSlider" minimum="1" maximum="4" labels="{['1','2','3','4']}" snapInterval="1" liveDragging="true" tickInterval="1"/>
				
			</mx:HBox>
			<mx:CheckBox id="curveCheckBox" label="{lang('Curved lines')}"
						 change="_plotter.curveType.value = curveCheckBox.selected ? ParallelCoordinatesPlotter.CURVE_DOUBLE : ParallelCoordinatesPlotter.CURVE_NONE"/>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Label Text Size: ')}"/>
				<mx:HSlider id="labelSizeSlider"
							width="100%"
							alpha="1.0"
							snapInterval="1"
							tickInterval="5" labels="{['5','10','15','20']}"
							minimum="5" maximum="20" 
							liveDragging="true"/>
				<mx:Label text="{lang('Color:')}"/>
				<mx:ColorPicker id="colorPicker" width="22" height="22"/>
			</mx:HBox>

			<mx:CheckBox id="zoomToSubsetCheckBox" label="{lang('Zoom to Subset')}" 
						 toolTip="Enables automatic zooming to the subset of data currently displayed"
						 creationComplete="linkBindableProperty(_plotter.zoomToSubset, event.target, 'selected')"/>
		</mx:VBox>
		<mx:VBox label="{lang('Grouping')}">
			<mx:CheckBox id="enableGroupByCheckBox" creationComplete="linkBindableProperty(_plotter.enableGroupBy, event.target, 'selected')"
						 label="{lang('Group records by column values')}"
						 toolTip="{lang('Enable/disable grouping data by category value')}"/>
			<mx:VBox enabled="{enableGroupByCheckBox.selected}">
				
				<mx:VBox paddingLeft="20" borderStyle="solid">
					<ui:DynamicColumnComponent visTool="{this}" label="{lang('X Column')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.xData"
											   toolTip="{lang('Attribute to appear on the x axis. All columns must have the same keyType.')}"/>
					<ui:DynamicColumnComponent visTool="{this}" label="{lang('Y Column')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.yData"
											   toolTip="{lang('Attribute to appear on the y axis. All columns must have the same keyType.')}"/>
					<ui:DynamicColumnComponent visTool="{this}" label="{lang('Group by')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.groupBy"
											   toolTip="{lang('Specify column to get keys from. All columns must have the same keyType.')}"/>
					<ui:DynamicColumnComponent visTool="{this}" label="{lang('Label')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = labelPlotter.text"
											   toolTip="{lang('Attribute used for record label text. All columns must have the same keyType.')}"/>
				</mx:VBox>
				<mx:Button label="{lang('Generate label Equation')}" toolTip="{lang('Generates label equation from current Label column if its keyType matches the group-by keyType')}"
						   click="updateLabelColumn()"/>
				<mx:HBox width="100%">
					<mx:Label text="{lang('Customize X values:')}"/>
					<mx:TextInput id="xValuesInput" toolTip="{lang('These values will appear on the x axis')}" width="100%"/>
					<mx:Button label="{lang('Apply')}" click="_plotter.xValues.value = xValuesInput.text;"/>
					<mx:Button label="{lang('Reset')}" click="_plotter.xValues.value = ''; updateFilterText();"/>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
