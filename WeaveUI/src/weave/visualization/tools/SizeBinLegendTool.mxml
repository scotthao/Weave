<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.linkSessionState;
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableDynamicObject;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.CustomCursorManager;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.InteractiveVisualization;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.layers.SimpleInteractiveVisualization;
			import weave.visualization.plotters.ColorBinLegendPlotter;
			import weave.visualization.plotters.SizeBinLegendPlotter;
			
			private const indent:int = 120;
			private const inputWidth:int = 64;
			private const COLOR_LEGEND_LAYER_NAME:String = "color legend";
			private var _sizeBinLegendPlotter:SizeBinLegendPlotter;
			private var _sizeBinLegendLayerSettings:LayerSettings;
			private var _colorLegendLayerSettings:LayerSettings;			
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				
				_sizeBinLegendPlotter = initializePlotters(SizeBinLegendPlotter, false);
				visualization.plotManager.plotters.requestObject(COLOR_LEGEND_LAYER_NAME, ColorBinLegendPlotter, true);
				
				_sizeBinLegendLayerSettings = visualization.plotManager.getLayerSettings(SimpleInteractiveVisualization.MAIN_PLOT_LAYER_NAME);
				_colorLegendLayerSettings = visualization.plotManager.getLayerSettings(COLOR_LEGEND_LAYER_NAME);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.plotManager.marginBottom.value = "5";
				visualization.plotManager.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.plotManager.marginLeft.value   = "5";
				visualization.plotManager.marginRight.value  = "5";

				visualization.topMarginClickCallbacks.addImmediateCallback(this, handleMarginLabelClick);
				colorColumn.addImmediateCallback(this, updateMarginLabel, true);
				
				panelWidth.value = "20%";
				panelHeight.value = "50%";

				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				visualization.plotManager.marginTopNumber.addGroupedCallback(this, handleMarginChange);
				linkBindableProperty(visualization.plotManager.marginTopNumber, marginLabel, "height");
				
				
				var delay:int = 500;
				linkBindableProperty(_sizeBinLegendPlotter.numberOfCircles, numOfCirclesNumericStepper, 'value', delay);
				linkBindableProperty(_sizeBinLegendPlotter.customCircleRadiuses, circleRadiusesTextInput, 'text', delay);
				
				_sizeBinLegendPlotter.typeRadio.addImmediateCallback(this, updateTypeRadioUI);
				
				marginLabelCheckBox.addEventListener(Event.CHANGE, toggleShowAttributeName);
			}
			
			private function updateTypeRadioUI():void
			{
				if (_sizeBinLegendPlotter.typeRadio.value == SizeBinLegendPlotter.simpleRadio)
					typeGroup.selection = simpleRadio;
				else if (_sizeBinLegendPlotter.typeRadio.value == SizeBinLegendPlotter.customRadio)
					typeGroup.selection = customRadio;
			}
			
			private function handleTypeRadio():void
			{
				// this may be zero even if children are created.
				if (typeGroup.numRadioButtons == 0) return;
				
				if (typeGroup.selection == simpleRadio)
					_sizeBinLegendPlotter.typeRadio.value = SizeBinLegendPlotter.simpleRadio;
				else if (typeGroup.selection == customRadio)
					_sizeBinLegendPlotter.typeRadio.value = SizeBinLegendPlotter.customRadio;
			}
			
			
			// Get called in handleScatterPlotChange
			override protected function get defaultPanelTitle():String
			{				
				if (scatterPlot == null || !scatterPlot.plotter.enabledSizeBy.value)
					return lang("Color legend of " + ColumnUtils.getTitle(colorColumn));
				else
					return lang("Size legend of " + ColumnUtils.getTitle(_sizeBinLegendPlotter.radiusColumn));
			}
			
			private static const DEFAULT_MARGIN_TOP:int = 25;
			private var _prevMarginTop:String = String(DEFAULT_MARGIN_TOP); // this stores the previous nonzero top margin setting
			private function handleMarginChange():void
			{
				if (visualization.plotManager.marginTopNumber.value != 0)
				{
					_prevMarginTop = visualization.plotManager.marginTop.value;
					marginLabelCheckBox.selected = true;
				}
				else
					marginLabelCheckBox.selected = false;
			}
			
			private function toggleShowAttributeName(e:Event):void
			{
				visualization.plotManager.marginTop.value = marginLabelCheckBox.selected ? _prevMarginTop : '0';
			}
			
			public const dynamicScatterPlotTool:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(ScatterPlotTool), handleScatterPlotChange, true);
			private function get scatterPlot():ScatterPlotTool
			{
				return dynamicScatterPlotTool.internalObject as ScatterPlotTool;
			}
			
			private function handleScatterPlotChange():void
			{
				// update the legend properties to reflect the new ScatterPlot properties.
				
				if (scatterPlot != null)
				{
					// One time session state copy
					copySessionState(scatterPlot.plotter.screenRadius, _sizeBinLegendPlotter.radiusColumn);
					copySessionState(scatterPlot.plotter.minScreenRadius, _sizeBinLegendPlotter.minScreenRadius);
					copySessionState(scatterPlot.plotter.maxScreenRadius, _sizeBinLegendPlotter.maxScreenRadius);
					
					copySessionState(scatterPlot.plotter.absoluteValueColorEnabled, _sizeBinLegendPlotter.absoluteValueColorEnabled);
					copySessionState(scatterPlot.plotter.absoluteValueColorMin, _sizeBinLegendPlotter.absoluteValueColorMin);
					copySessionState(scatterPlot.plotter.absoluteValueColorMax, _sizeBinLegendPlotter.absoluteValueColorMax);
				}
				
				if (scatterPlot && scatterPlot.plotter.enabledSizeBy.value)
				{
					// show size bin legend
					_colorLegendLayerSettings.visible.value = false;
					_sizeBinLegendLayerSettings.visible.value = true;
				}
				else
				{
					// show global color ramp legend
					_colorLegendLayerSettings.visible.value = true;
					_sizeBinLegendLayerSettings.visible.value = false;
				}
				
				updateMarginLabel();
				handlePanelTitleChange();
			}
			
			private function handleMarginLabelClick():void
			{
				if (_sizeBinLegendPlotter.radiusColumn.keys.length == 0 || scatterPlot == null)
					AttributeSelectorPanel.openDefaultSelector(colorColumn);
				else
					AttributeSelectorPanel.openDefaultSelector(scatterPlot.plotter.screenRadius);
			}
			
			[Bindable] private var marginLabelText:String = "";
			[Bindable] private var marginLabelMode:String = "";
			private static const MARGIN_LABEL_MODE_COLOR:String = lang('color');
			private static const MARGIN_LABEL_MODE_SIZE:String = lang('size');
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				if (_sizeBinLegendPlotter.radiusColumn.keys.length == 0 || scatterPlot == null)
				{
					marginLabelText = ColumnUtils.getTitle(colorColumn);
					marginLabelMode = MARGIN_LABEL_MODE_COLOR;
				}
				else
				{
					marginLabelText = ColumnUtils.getTitle(_sizeBinLegendPlotter.radiusColumn);
					marginLabelMode = MARGIN_LABEL_MODE_SIZE;
				}

				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}
			
			private function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
				 visible="{marginLabel.height > 0}"
				 fontWeight="bold" click="handleMarginLabelClick()" 
				 x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5"
				 text="{marginLabelText}" width="100%"
				 mouseOver="CustomCursorManager.showCursor(InteractiveVisualization.CURSOR_LINK)"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off"
				 mouseOut="CustomCursorManager.hack_removeCurrentCursor()"
				 wordWrap="true" selectable="false" editable="false"
				 borderThickness="0" backgroundAlpha="0"
				 toolTip="{lang('{0}\r\tClick here to select the attribute used for {1}.', marginLabelText, marginLabelMode)}"/>

	<ui:ControlPanel>
			<mx:VBox label="{lang('Tick Marks')}">
				<mx:RadioButtonGroup id="typeGroup" change="handleTypeRadio()"/>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:RadioButton id="simpleRadio" label="{lang('Equally Spaced')}" groupName="typeGroup" selected="true" width="100%"/>
					<mx:Label text="{lang('Number of Radiuses:')}"/>
					<mx:NumericStepper enabled="{simpleRadio.selected}" minimum="2" maximum="50" stepSize="1" id="numOfCirclesNumericStepper" width="{inputWidth}"/>
					<ui:HelpComponent label="{simpleRadio.label}">
						Example: If your data is between 0 and 100 and you specify 3 radiuses, the following radiuses will be created: 0, 50, 100
					</ui:HelpComponent>
				</mx:HBox>
				
				<mx:HRule width="100%"/>
				
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:RadioButton id="customRadio" label="{lang('Custom Radiuses')}" groupName="typeGroup" width="100%"/>
					<mx:TextInput enabled="{customRadio.selected}" id="circleRadiusesTextInput" width="100%"/>
					<ui:HelpComponent label="{customRadio.label}">
						Enter comma-separated custom break values.
					</ui:HelpComponent>
				</mx:HBox>
			</mx:VBox>
		
			<mx:Panel id="attributesPanel" 
					  label="{lang('Display Preferences')}"
					  headerHeight="2"
					  borderColor="0x000000" 
					  backgroundColor="0xCCCCCC" 
					  backgroundAlpha="0.0" 
					  borderThickness="0.0" 
					  height="100%" 
					  width="100%" 
					  borderAlpha="0.2" 
					  borderStyle="none">
				<mx:CheckBox id="marginLabelCheckBox" label="{lang('Show legend attribute name')}"/>
			</mx:Panel>
	</ui:ControlPanel>
</SimpleVisTool>
