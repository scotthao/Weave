<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 creationComplete="creationComplete();"
	     layout="absolute" xmlns:settings="weave.ui.settings.*">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.ui.IPlotter;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DynamicColumnComponent;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.CompoundBarChartPlotter;
			import weave.visualization.plotters.SimpleAxisPlotter;

			WeaveAPI.registerImplementation(IVisTool, CompoundBarChartTool, "Bar Chart");

			/**
			 * When this is set to true, labels for all bars will be shown.
			 */
			public const showAllLabels:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateAxisLabels, true);
			public const sizeAxisTickCountRequested:LinkableNumber = registerLinkableChild(this, new LinkableNumber(5), sizeAxisTickCountRequestedChanged, true);
			public const linkHeightAndSortColumns:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), handleHeightColumnsChange);
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private var _plotter:CompoundBarChartPlotter = null;
			private var _showYAxisLabels:Boolean = false;
			private var _showXAxisLabels:Boolean = false;

			override protected function constructor():void
			{
				super.constructor();

				// lock dynamic objects into place
				_plotter = initializePlotters(CompoundBarChartPlotter, true);
				_plotter.groupingMode.addImmediateCallback(this, updateAxisLabels);
				_plotter.horizontalMode.addImmediateCallback(this, updateAxisLabels);
				_plotter.showLabels.addImmediateCallback(this, updateAxisLabels);
				
				_plotter.sortColumn.addGroupedCallback(this, handleSortColumnChange);
				_plotter.heightColumns.addGroupedCallback(this, handleHeightColumnsChange);
				
				var objects:Array = [
						xAxisPlotter,
						yAxisPlotter,
						visualization.plotManager.marginLeftNumber,
						visualization.plotManager.marginBottomNumber,
						visualization.plotManager.marginTopNumber,
						visualization.plotManager.marginRightNumber,
						_plotter
					];
				for each (var object:ILinkableObject in objects)
					getCallbackCollection(object).addGroupedCallback(this, updateAxisLabels, true);
				
				for each (var override:ILinkableObject in [
						visualization.plotManager.overrideXMin,
						visualization.plotManager.overrideYMin,
						visualization.plotManager.overrideXMax,
						visualization.plotManager.overrideYMax])
				{
					for each (var axisPlotter:IPlotter in [xAxisPlotter, yAxisPlotter])
						getCallbackCollection(override).addImmediateCallback(this, axisPlotter.spatialCallbacks.triggerCallbacks);
				}

				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginLeft.value = "80";
				visualization.plotManager.marginTop.value = "30";
				visualization.plotManager.marginRight.value = "30";
				
				visualization.enableZoomAndPan.value = false;

				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { handleAxisClick(true); });
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { handleAxisClick(false); });
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [_plotter.sortColumn];
				for (var i:int = 0; i < count; i++)
				{
					columnsToInit.push(_plotter.heightColumns.requestObject(null, DynamicColumn, false));
				}
				if (columnsToInit.length > 0)
					(initColumnDefaults as Function).apply(null, columnsToInit);
				getCallbackCollection(_plotter).addGroupedCallback(this,updateProbeColumns);
			}
			
			protected function creationComplete():void
			{
				cRampEditor.colorRamp = _plotter.chartColors;
				linkBindableProperty(_plotter.horizontalMode, horizontalCheckBox, "selected");
				linkBindableProperty(_plotter.barSpacing, barSpacingSlider, "value");
				linkBindableProperty(_plotter.showValueLabels, showValueLabelsCheckBox, "selected");
				linkBindableProperty(_plotter.groupingMode, groupMode, 'selectedValue', 0); // this must be done after creationComplete because the RadioButtonGroup hasn't been initialized until then.
				_plotter.groupingMode.addGroupedCallback(this, updateInteractivity, true);
				_plotter.groupBySortColumn.addGroupedCallback(this, updateInteractivity, true);
				getCallbackCollection(_plotter.heightColumns).addGroupedCallback(this, updateInteractivity, true);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [
					lang("Color"),
					lang("Label"),
					lang("Sort"),
					lang("Height"),
					lang("Positive Error"),
					lang("Negative Error")
				];
			}
			override public function getSelectableAttributes():Array
			{
				return [
					colorColumn,
					_plotter.labelColumn,
					_plotter.sortColumn,
					_plotter.heightColumns,
					_plotter.positiveErrorColumns,
					_plotter.negativeErrorColumns
				];
			}
			
			public function get heightColumns():ILinkableHashMap { return _plotter.heightColumns; }
			public function get chartColors():ColorRamp { return _plotter.chartColors; }
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					var columns:Array = [];
					var _heightColumns:Array = _plotter.heightColumns.getObjects(IAttributeColumn);
					var _posErrColumns:Array = _plotter.positiveErrorColumns.getObjects(IAttributeColumn);
					var _negErrColumns:Array = _plotter.negativeErrorColumns.getObjects(IAttributeColumn);
					for (var i:int = 0; i < _heightColumns.length; i++)
					{
						columns.push(_heightColumns[i]);
						if (_posErrColumns.length > i && _negErrColumns.length > i)
							columns.push(_posErrColumns[i], _negErrColumns[i]);
					}
					if (_heightColumns.length <= 1)
					{
						// get all ReferencedColumn objects
						var refCols:Array = WeaveAPI.SessionManager.getLinkableDescendants(_plotter.colorColumn, ReferencedColumn);
						for each (var col:IAttributeColumn in refCols)
							columns.unshift(col);
					}
					columns.unshift(_plotter.labelColumn, _plotter.sortColumn);
					visualization.additionalProbeColumns = columns;
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			private function numberToString(value:Number):String
			{
				return value.toString();
			}
			
 			private function handleAxisClick(isXAxis:Boolean):void
			{
				if (isXAxis != _plotter.horizontalMode.value)
					AttributeSelectorPanel.openToolSelector(this,_plotter.sortColumn);
				else
					AttributeSelectorPanel.openToolSelector(this,_plotter.heightColumns);
			}
			
			override protected function get defaultPanelTitle():String
			{
				var columns:Array = _plotter.heightColumns.getObjects(IAttributeColumn);
				for (var i:int = 0; i < columns.length; i++)
					columns[i] = ColumnUtils.getTitle(columns[i] as IAttributeColumn);
				return lang("Bar Chart of {0}", columns.join(lang(', ')));
			}
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			private var sizeAxisTickChange:Boolean = false;
			
			private function sizeAxisTickCountRequestedChanged():void
			{
				sizeAxisTickChange = true;
				updateAxisLabels();
			}
			
			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				
				var sortAxisTitle:String = lang("Sorted by {0}", ColumnUtils.getTitle(_plotter.sortColumn));
				var heightAxisTitle:String = '';
				var heightColumns:Array = _plotter.heightColumns.getObjects();
				for (var i:int = 0; i < heightColumns.length; i++)
				{
					if (i > 0)
						heightAxisTitle += lang(', ');
					heightAxisTitle += ColumnUtils.getTitle(heightColumns[i] as IAttributeColumn);
				}
				if (heightAxisTitle == '')
					heightAxisTitle = lang("Click to select...");

				var sortAxisToolTipColumn:IAttributeColumn = _plotter.sortColumn;
				var heightAxisToolTipColumn:IAttributeColumn = heightColumns.length > 0 ? heightColumns[0] : null;
				
				var sortAxis:SimpleAxisPlotter;
				var heightAxis:SimpleAxisPlotter;
				
				var xAxisTitle:String; // title for x axis, whether or not horizontal mode is on
				var yAxisTitle:String; // title for y axis, whether or not horizontal mode is on

				// BEGIN handling of horizontal/vertical mode ----------------------
				var _groupingMode:String = _plotter.getActualGroupingMode();
				if (_plotter.horizontalMode.value)
				{
					yAxisTitle = sortAxisTitle;
					sortAxis = yAxisPlotter;
					visualization.leftMarginColumn = sortAxisToolTipColumn;
									
					heightAxis = xAxisPlotter;
					xAxisTitle = heightAxisTitle;
					visualization.bottomMarginColumn = heightAxisToolTipColumn;
					
					visualization.enableProbeLine(_groupingMode == CompoundBarChartPlotter.STACK, false);
				}
				else
				{
					xAxisTitle = sortAxisTitle;
					sortAxis = xAxisPlotter;
					visualization.bottomMarginColumn = sortAxisToolTipColumn;
					
					yAxisTitle = heightAxisTitle;
					heightAxis = yAxisPlotter;
					visualization.leftMarginColumn = heightAxisToolTipColumn;
					
					visualization.enableProbeLine(false, _groupingMode == CompoundBarChartPlotter.STACK);
				}
				
				sortAxis.setLabelFunction(_plotter.sortAxisLabelFunction);
				heightAxis.setLabelFunction(heightAxisLabelFunction);
				
				// height axis uses automatic min,max based on data
				heightAxis.tickMinValue.value = NaN;
				heightAxis.tickMaxValue.value = NaN;
				heightAxis.forceTickCount.value = false;
				if( sizeAxisTickChange )
					heightAxis.tickCountRequested.value = sizeAxisTickCountRequested.value;
				else
					sizeAxisTickCountRequested.value = heightAxis.tickCountRequested.value;
				heightAxis.showLabels.value = true;
				
				sizeAxisTickChange = false;

				// sort axis automatic min,max would be -0.5, numBars-0.5.  we don't want that.
				sortAxis.tickMinValue.value = 0;
				sortAxis.tickMaxValue.value = _plotter.maxTickMarks - 1;
				sortAxis.forceTickCount.value = showAllLabels.value;
				if (showAllLabels.value)
					sortAxis.tickCountRequested.value = _plotter.maxTickMarks;
				else
					sortAxis.tickCountRequested.value = Math.min(_plotter.maxTickMarks, 11);
				sortAxis.showLabels.value = !_plotter.showLabels.value || showAllLabels.value;

				// END handling of horizontal/vertical mode --------------------------------
				
				xAxisPlotter.setSideAxisName(xAxisTitle, 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisPlotter.setSideAxisName(yAxisTitle, -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
			
			private function heightAxisLabelFunction(value:Number):String
			{
				var _heightColumns:Array = _plotter.heightColumns.getObjects();
				if (_plotter.getActualGroupingMode() == CompoundBarChartPlotter.PERCENT_STACK && _heightColumns.length > 1)
					return StandardLib.roundSignificant(value) + '%';
				else if (_heightColumns.length > 0)
					return ColumnUtils.deriveStringFromNumber(_heightColumns[0], value); // always use the first column to format the axis labels
				return null;
			}
			
			private function handleSortColumnChange():void
			{
				if (!_plotter.sortColumn.getInternalColumn())
					return;
				
				if (linkHeightAndSortColumns.value)
				{
					_plotter.heightColumns.delayCallbacks();
					
					ColumnUtils.forceFirstColumnDynamic(_plotter.heightColumns);
					var columns:Array = _plotter.heightColumns.getObjects();
					copySessionState(_plotter.sortColumn, columns[0]);
					
					_plotter.heightColumns.resumeCallbacks();
				}
			}
			
			private function handleHeightColumnsChange():void
			{
				if (_plotter.heightColumns.getObjects().length < 1)
					return;

				if (linkHeightAndSortColumns.value)
				{
					_plotter.heightColumns.delayCallbacks();
					
					ColumnUtils.forceFirstColumnDynamic(_plotter.heightColumns);
					var columns:Array = _plotter.heightColumns.getObjects();
					copySessionState(columns[0], _plotter.sortColumn);
					
					_plotter.heightColumns.resumeCallbacks();
				}
			}
			
			private function updateInteractivity():void
			{
				if (!parent)
					return callLater(updateInteractivity);
				var _heightColumns:Array = _plotter.heightColumns.getObjects();
				
				if (_heightColumns.length > 1)
				{
					cRampEditor.enabled = true;
					groupMode.enabled = true;
					colorColumnInput.enabled = false;
				}
				else
				{
					cRampEditor.enabled = false;
					groupMode.enabled = false;
					colorColumnInput.enabled = true;
				}
			}
			
			private const groupCheckDisabledToolTip:String = lang('There is only one attribute chosen for this bar chart, therefore it is a standard (not grouped or stacked) and this feature is disabled.');
			private const groupCheckEnabledToolTip:String = lang('Check this box to group rather than stack the bars.  \n\nIn stacked mode each segment representing a single record at a given attribute are placed together along a single bar, each segment representing a proportion of the entire bar length.  \n\nIn grouped mode, each bar representing a single record at a given attribute are placed side-by-side.');
			
			public function createLegend():void
			{
				var barChartLegendTool:BarChartLegendTool = Weave.root.requestObject(null, BarChartLegendTool, false);
				barChartLegendTool.dynamicBarChartTool.globalName = Weave.root.getName(this);
			}
			
			[Bindable] private var indent:int = 80;
			
			// backwards compatibility
			[Deprecated] public function set labelColumn(value:Object):void { setSessionState(_plotter.labelColumn, value); }
			
			private function showValueLabelsCheckBox_changeHandler():void
			{
				if (showValueLabelsCheckBox.selected)
				{
					if ((stackedRadioButton.enabled && stackedRadioButton.selected)|| (percentStackedRadioButton.enabled && percentStackedRadioButton.selected))
						_plotter.valueLabelHorizontalAlign.value = lang("center");
					else
						_plotter.valueLabelHorizontalAlign.value = lang("left");
				}
			}
			
			//The following functions: generateBarChartMessage, identifyBarChartMessageCaegory,  are prototype functions for 
			//implementation of accessibility options
			//The output of generateBarChartMessage should eventually replace the user input for ADA options in the bar chart 
			//tools menu
			
			private function generateBarChartMessage():String {
				//parameters passed to the function should include the message category and any data values that are pertinent to that message category 
				//OR should determine within the function which data values it needs to pull out, given the message category
				//the code inside this function should realize a sentence using the message category and the pertinent data values for that message category
				//Fuf Surge here!
				return "This is a bar chart";
			}
			
			private function identifyBarChartMessageCaegory():String {
				//should use stats or R to determine which message category the bar chart belongs to
				//message categories from lit for bar chart include: 
				return "Outlier";
			}
			//UpdateBarChartMessage should be called whenever it's necessary to update the
			//message when major changes have been made to the visualization
			
			private function updateBarChartMessage():String{
				
				//if major changes have been made, update message
				return generateBarChartMessage();

			}
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Basic')}">
			<ui:DynamicColumnComponent visTool="{this}" id="colorColumnInput" label="{lang('Color')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = colorColumn"
									   toolTip="{lang('Color column selection is enabled when only a single column is in the list below.')}" showLinkControl="false"/>
			<ui:DynamicColumnComponent visTool="{this}" label="{lang('Label')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.labelColumn"/>
			<ui:DynamicColumnComponent visTool="{this}" label="{lang('Sort')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.sortColumn"/>
			<mx:CheckBox id="groupBySortColumnCheckBox" label="{lang('Group bars by the sort column')}" creationComplete="linkBindableProperty(_plotter.groupBySortColumn, event.target, 'selected');"/>
			<mx:CheckBox label="{lang('Link Height and Sort Column')}" creationComplete="linkBindableProperty(linkHeightAndSortColumns, event.target, 'selected');"/>
			<mx:HBox>
				<mx:CheckBox id="horizontalCheckBox" label="{lang('Horizontal bars')}"
							 toolTip="{lang('Check this box to display the bars horizontally, with values setting the length of the bar (from left to right) rather than the height (from bottom to top).')}"/>
				<mx:RadioButtonGroup id="groupMode"/>
				<mx:RadioButton id="groupedRadioButton" groupName="groupMode" label="{lang('Grouped bars')}" value="{CompoundBarChartPlotter.GROUP}"/>
				<mx:RadioButton id="stackedRadioButton" groupName="groupMode" label="{lang('Stacked bars')}" value="{CompoundBarChartPlotter.STACK}"/>
				<mx:RadioButton id="percentStackedRadioButton" groupName="groupMode" label="{lang('100% Stacked bars')}" value="{CompoundBarChartPlotter.PERCENT_STACK}"/>
			</mx:HBox>
			<mx:TabNavigator width="100%" height="100%" creationPolicy="all">
				<ui:ColumnListComponent visTool="{this}" label="{lang('Height attributes')}" creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.heightColumns"/>
				<ui:ColumnListComponent visTool="{this}" label="{lang('Positive error')}" creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.positiveErrorColumns"/>
				<ui:ColumnListComponent visTool="{this}" label="{lang('Negative error')}" creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.negativeErrorColumns"/>
			</mx:TabNavigator>
		</mx:VBox>
		
		<mx:VBox label="{lang('Labeling')}">
			<mx:Button label="{lang('Show legend')}" click="createLegend()"/>
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 toolTip="{lang('Checking this box makes all of the following attributes visible in this tool\'s probe tooltip')}"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<mx:CheckBox label="{lang('Show all axis labels')}" creationComplete="linkBindableProperty(showAllLabels, event.target, 'selected');"/>
			<mx:HBox width="100%">
				<mx:VBox width="100%">
					<mx:CheckBox label="{lang('Show bar labels')}" id="labelsChkBx"
								 creationComplete="linkBindableProperty(_plotter.showLabels, event.target, 'selected')"/>
					<mx:VBox paddingLeft="24" enabled="{labelsChkBx.selected}" width="100%">
						<mx:HBox>
							<mx:CheckBox id="colorRecordLabelsChk" label="{lang('Color by record')}"
										 creationComplete="linkBindableProperty(_plotter.recordLabelColoring, event.target, 'selected')"/>
							<ui:HelpComponent>This specifies if each label should have the same color as its corresponding record.</ui:HelpComponent>
							<mx:Spacer width="100%"/>
							<mx:HBox id="colorRecordLabelsBox" enabled="{!colorRecordLabelsChk.selected}">
								<mx:Label text="{lang('Color')}"/>
								<mx:ColorPicker creationComplete="linkBindableProperty(_plotter.labelColor, event.target, 'selectedColor');"/>
								<ui:HelpComponent>This specifies the color to use for every label.</ui:HelpComponent>
							</mx:HBox>
						</mx:HBox>
						<mx:HBox>
							<mx:VBox>
								<ui:IndentTextInput inputWidth="64" label="{lang('Position')}" creationComplete="linkBindableProperty(_plotter.labelDataCoordinate, event.target, 'text')"/>
								<ui:Indent label="{lang('Angle')}">
									<mx:NumericStepper minimum="-180" maximum="180" stepSize="15" width="64"
											creationComplete="linkBindableProperty(_plotter.labelRelativeAngle, event.target, 'value')"/>
								</ui:Indent>
								<ui:Indent label="{lang('Max width')}">
									<mx:NumericStepper minimum="5" maximum="1000" stepSize="5" width="64"
											creationComplete="linkBindableProperty(_plotter.labelMaxWidth, event.target, 'value')"/>
								</ui:Indent>
							</mx:VBox>
							<ui:AlignmentControl creationComplete="linkBindableProperty(_plotter.labelVerticalAlign, event.target, 'verticalAlign'); linkBindableProperty(_plotter.labelHorizontalAlign, event.target, 'horizontalAlign');"/>
						</mx:HBox>
						<mx:Label text="{lang('Label formatter:')}"/>
						<mx:Box paddingLeft="24">
							<mx:TextArea width="100%" height="100%" creationComplete="linkBindableProperty(_plotter.labelFormatter, event.target, 'text');"/>
						</mx:Box>
					</mx:VBox>
				</mx:VBox>
				<mx:Spacer width="100%"/>
				<mx:VBox width="100%">
					<mx:CheckBox id="showValueLabelsCheckBox" label="{lang('Show value labels')}" change="showValueLabelsCheckBox_changeHandler()"/>
					<mx:VBox paddingLeft="24" enabled="{showValueLabelsCheckBox.selected}" width="100%">
						<mx:HBox>
							<mx:CheckBox id="colorValueLabelsChk" label="{lang('Color by record')}"
										 creationComplete="linkBindableProperty(_plotter.recordValueLabelColoring, event.target, 'selected')"/>
							<ui:HelpComponent>This specifies if each label should have the same color as its corresponding record.</ui:HelpComponent>
							<mx:Spacer width="100%"/>
							<mx:HBox id="colorValueLabelColorBox" enabled="{!colorValueLabelsChk.selected}">
								<mx:Label text="{lang('Color')}"/>
								<mx:ColorPicker id="valueLabelColorPicker" creationComplete="linkBindableProperty(_plotter.valueLabelColor, event.target, 'selectedColor');"/>
								<ui:HelpComponent>This specifies the color to use for every label.</ui:HelpComponent>
							</mx:HBox>
						</mx:HBox>
						<mx:HBox>
							<mx:VBox>
								<ui:IndentTextInput inputWidth="64" label="{lang('Position')}" creationComplete="linkBindableProperty(_plotter.valueLabelDataCoordinate, event.target, 'text')"/>
								<ui:Indent label="{lang('Angle')}">
									<mx:NumericStepper minimum="-180" maximum="180" stepSize="15" width="64"
											creationComplete="linkBindableProperty(_plotter.valueLabelRelativeAngle, event.target, 'value')"/>
								</ui:Indent>
								<ui:Indent label="{lang('Max width')}">
									<mx:NumericStepper minimum="5" maximum="1000" stepSize="5" width="64"
											creationComplete="linkBindableProperty(_plotter.valueLabelMaxWidth, event.target, 'value')"/>
								</ui:Indent>
							</mx:VBox>
							<ui:AlignmentControl creationComplete="linkBindableProperty(_plotter.valueLabelVerticalAlign, event.target, 'verticalAlign'); linkBindableProperty(_plotter.valueLabelHorizontalAlign, event.target, 'horizontalAlign');"/>
						</mx:HBox>
					</mx:VBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox id="advControlsPanel" label="{lang('Advanced')}">
			<mx:CheckBox label="{lang('In stacked mode, use gaps for missing data')}" creationComplete="linkBindableProperty(_plotter.stackedMissingDataGap, event.target, 'selected');"/>
			<ui:Indent label="{lang('Bar spacing:')}">
				<mx:HSlider id="barSpacingSlider" value="0" minimum="0" maximum="1" labels="{[lang('No gap'), lang('1:3'), lang('1:1')]}" tickInterval="0.25"
							toolTip="{lang('Move this slider to change the gap between bars.  All the way to the left means no gap.  The highest value is a 1:1 ratio, meaning equal bar width to gap width.')}" showDataTip="false"
							liveDragging="true"/>
			</ui:Indent>
			
			<mx:CheckBox label="{lang('Zoom to subset (height)')}"
						 toolTip="{lang('Enables automatic zooming to the subset of height data currently displayed')}"
						 creationComplete="linkBindableProperty(_plotter.zoomToSubset, event.target, 'selected')"/>
			<mx:CheckBox label="{lang('Zoom to subset (bars)')}"
						 toolTip="{lang('Enables automatic zooming to the subset of bars currently displayed')}"
						 creationComplete="linkBindableProperty(_plotter.zoomToSubsetBars, event.target, 'selected')"/>
			<ui:ColorRampEditor id="cRampEditor" toolTip="{lang('The color ramp can only be set when more than one height column is specified.')}"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
