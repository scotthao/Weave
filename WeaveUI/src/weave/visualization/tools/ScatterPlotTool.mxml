<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:settings="weave.ui.settings.*" xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
			   xmlns:userControls="weave.ui.userControls.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.primitives.IBounds2D;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.PlotterUtils;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.layers.SimpleInteractiveVisualization;
			import weave.visualization.plotters.RegressionLinePlotter;
			import weave.visualization.plotters.ScatterPlotPlotter;

			WeaveAPI.registerImplementation(IVisTool, ScatterPlotTool, lang("Scatterplot"));
			
			[Bindable]
			public var plotter:ScatterPlotPlotter = null;
						
			
			public const REGRESSION_LAYER_NAME:String = "regressionLine";
				
			private function enableEquationTextEditing ():void 
			{
				if (editTextArea.value) 
				{
					equationText.editable = true;
				}
				else
				{
					equationText.editable = false;
				}				
			}
			
			public const editTextArea:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), enableEquationTextEditing);
			
			private function isVisibleEquationText():void
			{
				if (isVisibleEquationTextBoolean.value)
				{
					equationText.visible = true;
				}
				else
				{
					equationText.visible = false;
				}
			}
			
			public var isVisibleEquationTextBoolean:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), isVisibleEquationText);
			
			
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				plotter = initializePlotters(ScatterPlotPlotter, true);
				
				
				
				visualization.enableProbeLine(true, true);
				
				//BEGIN TEMPORARY SOLUTION
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				// END TEMPORARY SOLUTION
				
				visualization.enableZoomAndPan.value = false;
				
				xAxisPlotter.setLabelFunction(labelFunctionX);
				yAxisPlotter.setLabelFunction(labelFunctionY);
				
				var self:* = this;
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, plotter.dataX); })
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, plotter.dataY); })
				
				visualization.enableAutoZoomXToNiceNumbers.value = true;
				visualization.enableAutoZoomYToNiceNumbers.value = true;
				
				getCallbackCollection(plotter).addGroupedCallback(this, handlePanelTitleChange, true);
				
				initColumnDefaults(plotter.dataX, plotter.dataY, colorColumn);
				
				plotter.dataX.addGroupedCallback(this, updateProbeColumns);
				plotter.dataY.addGroupedCallback(this, updateProbeColumns);
				colorColumn.addGroupedCallback(this, updateProbeColumns);
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "30";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "30";
				
				initializeUndefinedLayers();				
				initRegressionLayer();
				
				children.childListCallbacks.addGroupedCallback(this, handleChildrenChildList);
			}
			
			private function handleChildrenChildList():void
			{
				// this will make sure the undefined x,y visualizations are on top of the main vis.
				// get existing order
				var order:Array = children.getNames();
				var args:Array = [UNDEFINED_X_NAME, UNDEFINED_Y_NAME, UNDEFINED_XY_NAME];
				// remove vis_undef_* names
				for each (var name:String in args)
					order.splice(order.indexOf(name), 1);
				// replace the main vis name with the list of vis names
				var visName:String = children.getName(visualization);
				args.unshift(order.indexOf(visName), 1, visName);
				order.splice.apply(null, args);
				// save new order
				children.setNameOrder(order);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [lang("X"), lang("Y"), lang("Color"), lang("Size")];
			}
			override public function getSelectableAttributes():Array
			{
				return [plotter.dataX, plotter.dataY, colorColumn, plotter.screenRadius];
			}
		
			[Bindable]
			public var regressionPlotter:RegressionLinePlotter = null;
			
			private function initRegressionLayer():void
			{
				regressionPlotter = visualization.plotManager.plotters.requestObject(REGRESSION_LAYER_NAME, RegressionLinePlotter, true);
				visualization.plotManager.getLayerSettings(REGRESSION_LAYER_NAME).selectable.value = false;
				linkSessionState(plotter.dataX, regressionPlotter.xColumn);
				linkSessionState(plotter.dataY, regressionPlotter.yColumn);
				//regressionPlotter.currentTrendline.value = null;
				//regressionPlotter.drawLine.value = false;				
			}
			
			
			/*BEGIN UNDEFINED LAYER CODE*/
					
			private var vis_undef_x:SimpleInteractiveVisualization;
			private var vis_undef_y:SimpleInteractiveVisualization;
			private var vis_undef_xy:SimpleInteractiveVisualization;
			
			private const UNDEFINED_X_NAME:String = "undefinedX";
			private const UNDEFINED_Y_NAME:String = "undefinedY";
			private const UNDEFINED_XY_NAME:String = "undefinedXY";
			
			private const _tempBounds:Bounds2D = new Bounds2D();
			
			private function initializeUndefinedLayers():void
			{
				vis_undef_x = children.requestObject(UNDEFINED_X_NAME, SimpleInteractiveVisualization, true);
				vis_undef_y = children.requestObject(UNDEFINED_Y_NAME, SimpleInteractiveVisualization, true);
				vis_undef_xy = children.requestObject(UNDEFINED_XY_NAME, SimpleInteractiveVisualization, true);

				vis_undef_x.toolTip = lang("Undefined X");
				vis_undef_y.toolTip = lang("Undefined Y");
				vis_undef_xy.toolTip = lang("Undefined X and Y");
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, resizeUndefinedLayers, true);
				
				for each (var vis:SimpleInteractiveVisualization in [vis_undef_x, vis_undef_y, vis_undef_xy])
				{
					vis.initializePlotters(ScatterPlotPlotter, false);
					vis.enableAutoZoomXToNiceNumbers.value = true;
					vis.enableAutoZoomYToNiceNumbers.value = true;
					
					var _plotter:ScatterPlotPlotter = vis.getMainPlotter() as ScatterPlotPlotter;
					linkSessionState(plotter.fill.color, _plotter.fill.color);
					linkSessionState(plotter.fill.alpha, _plotter.fill.alpha);
					linkSessionState(plotter.screenRadius, _plotter.screenRadius);					
					linkSessionState(plotter.defaultScreenRadius, _plotter.defaultScreenRadius);
					linkSessionState(plotter.enabledSizeBy, _plotter.enabledSizeBy);
					linkSessionState(plotter.maxScreenRadius, _plotter.maxScreenRadius);
					linkSessionState(plotter.minScreenRadius, _plotter.minScreenRadius);
					
					var undefSettings:LayerSettings = vis.getMainLayerSettings();
					undefSettings.hack_includeMissingRecordBounds = true;
					linkSessionState(visualization.getMainLayerSettings(), undefSettings);
					linkSessionState(visualization.plotManager.zoomBounds, vis.plotManager.zoomBounds);
				}
				
				var plotter_undef_x:ScatterPlotPlotter = vis_undef_x.getMainPlotter() as ScatterPlotPlotter;
				var plotter_undef_y:ScatterPlotPlotter = vis_undef_y.getMainPlotter() as ScatterPlotPlotter;
				var plotter_undef_xy:ScatterPlotPlotter = vis_undef_xy.getMainPlotter() as ScatterPlotPlotter;
				
				plotter_undef_x.hack_setKeyInclusionLogic(
					function(key:IQualifiedKey):Boolean
					{
						var x:Boolean = plotter.dataX.containsKey(key);
						var y:Boolean = plotter.dataY.containsKey(key);
						return !x && y;
					},
					[plotter.dataX, plotter.dataY]
				);
				plotter_undef_y.hack_setKeyInclusionLogic(
					function(key:IQualifiedKey):Boolean
					{
						var x:Boolean = plotter.dataX.containsKey(key);
						var y:Boolean = plotter.dataY.containsKey(key);
						return x && !y;
					},
					[plotter.dataX, plotter.dataY]
				);
				plotter_undef_xy.hack_setKeyInclusionLogic(
					function(key:IQualifiedKey):Boolean
					{
						var x:Boolean = plotter.dataX.containsKey(key);
						var y:Boolean = plotter.dataY.containsKey(key);
						return !x && !y;
					},
					[plotter.dataX, plotter.dataY]
				);
				
				linkSessionState(plotter.dataX, plotter_undef_y.dataX);
				linkSessionState(plotter.dataY, plotter_undef_x.dataY);
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, invalidateDisplayList);
				
				visualization.plotManager.marginTopNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.plotManager.marginBottomNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.plotManager.marginRightNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.plotManager.marginLeftNumber.addImmediateCallback(this, invalidateDisplayList);
				
				visualization.gridLineAlpha.addImmediateCallback(this, updateUndefLayerLines);
				visualization.gridLineColor.addImmediateCallback(this, updateUndefLayerLines);
				visualization.gridLineThickness.addImmediateCallback(this, updateUndefLayerLines, true);
			}
			private function updateUndefLayerLines():void
			{
				var args:Array = [visualization.gridLineThickness.value, visualization.gridLineColor.value, visualization.gridLineAlpha.value];
				(vis_undef_x.getMainPlotter() as ScatterPlotPlotter).hack_verticalBackgroundLineStyle = args;
				(vis_undef_y.getMainPlotter() as ScatterPlotPlotter).hack_horizontalBackgroundLineStyle = args;
				getCallbackCollection(vis_undef_x.getMainPlotter()).triggerCallbacks();
				getCallbackCollection(vis_undef_y.getMainPlotter()).triggerCallbacks();
			}
			private function resizeUndefinedLayers():void
			{
				var b:IBounds2D = _tempBounds;
				var marginRight:Number = visualization.plotManager.marginRightNumber.value;
				
				// right margin undefined x
				visualization.plotManager.zoomBounds.getScreenBounds(b);
				_tempBounds.setXMin(b.getXMax() + marginRight);
				_tempBounds.setWidth(b.getWidth() * 0.66);
				setDisplayObjectBounds(vis_undef_x, b);
				
				// top margin undefined y
				visualization.plotManager.zoomBounds.getScreenBounds(b);
				_tempBounds.setYMin(0);
				_tempBounds.setHeight(b.getHeight() * 0.66);
				setDisplayObjectBounds(vis_undef_y, b);
				
				// top-right corner undefined xy
				visualization.plotManager.zoomBounds.getScreenBounds(b);
				_tempBounds.setMinCoords(b.getXNumericMax() + marginRight, 0);
				_tempBounds.centeredResize(b.getWidth() / 2, b.getHeight() / 2);
				setDisplayObjectBounds(vis_undef_xy, b);
			}
			private function setDisplayObjectBounds(displayObject:DisplayObject, bounds:IBounds2D):void
			{
				displayObject.x = bounds.getXNumericMin();
				displayObject.y = bounds.getYNumericMin();
				displayObject.width = bounds.getXCoverage();
				displayObject.height = bounds.getYCoverage();
			}
			/*END UNDEFINED LAYER CODE*/
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if(includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [];
					if (plotter.dataX.getInternalColumn())
						visualization.additionalProbeColumns.push(plotter.dataX.getInternalColumn());
					if (plotter.dataY.getInternalColumn())
						visualization.additionalProbeColumns.push(plotter.dataY.getInternalColumn());
					if (colorColumn.getInternalColumn())
						visualization.additionalProbeColumns.push(colorColumn.getInternalColumn());
					if (visualization.additionalProbeColumns.length == 0)
						visualization.additionalProbeColumns = null ;
				}
				else visualization.additionalProbeColumns = null;
			}
			
			override protected function get defaultPanelTitle():String
			{
				return lang("Scatter Plot of {0} -vs- {1}", ColumnUtils.getTitle(plotter.dataX), ColumnUtils.getTitle(plotter.dataY));
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				plotter.fill.color.addImmediateCallback(this, handleColorColumnChange, true);
				linkBindableProperty(plotter.fill.alpha.defaultValue, alphaSlider, "value");
				linkBindableProperty(plotter.enabledSizeBy, sizeByCheck, "selected");
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateEquation);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateEquation);
				getCallbackCollection(regressionPlotter).addGroupedCallback(this, updateEquation, true);
				showColorPicker.addGroupedCallback(this, updateColorPicker);
				overrideColor.addGroupedCallback(this, updateColorPicker);
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateEquationStyle, true);
				getCallbackCollection(plotter).addGroupedCallback(this, handlePlotterChange, true);
			}
			
			private function updateEquationStyle():void
			{
				LinkableTextFormat.defaultTextFormat.copyToStyle(equationText);
			}
			
			private function updateEquation():void
			{
				var str:String = '';
				// add switch block here
				if ( regressionPlotter.drawLine.value )
				{
					if (equationText.parent != visCanvas)
						visCanvas.addChild(equationText);
					if (regressionPlotter.getCoefficients() != null)
					{
						if (regressionPlotter.currentTrendline.value == "Linear")
						{	
							var slope:Number = StandardLib.roundSignificant(regressionPlotter.getCoefficients()[1], 4);
							var intercept:Number = StandardLib.roundSignificant(regressionPlotter.getCoefficients()[0], 4);
							var rsquared:Number = StandardLib.roundSignificant(regressionPlotter.getrSquared(), 4);
							str = lang("y = {0}x + {1}\nR^2 = {2}", slope, intercept, rsquared);					
						}
					
						else if( regressionPlotter.currentTrendline.value == "Polynomial")
						{
							var rawCoefficients:Array = regressionPlotter.getCoefficients();
							var roundedCoefficients:Array = [];
							rsquared = StandardLib.roundSignificant(regressionPlotter.getrSquared(), 4);
							str = lang("y = ");
							var i:int = 0;
						
							for (i = 0; i < rawCoefficients.length ; i++ )
							{
								roundedCoefficients.push(StandardLib.roundSignificant(rawCoefficients[i], 4));
							}
						
							for (i = roundedCoefficients.length - 1; i >  0; i-- )
							{
								str += lang("{0}x^{1} + ", roundedCoefficients[i], i); 
							}
							
							str += roundedCoefficients[0];
							str += lang("\nR^2 = {0}", rsquared);
							
						}
						else if (regressionPlotter.currentTrendline.value == "Exponential")
						{
							var base:Number = StandardLib.roundSignificant(regressionPlotter.getCoefficients()[0], 4);
							var exponent:Number = StandardLib.roundSignificant(Math.exp(regressionPlotter.getCoefficients()[1]), 4);
							rsquared = StandardLib.roundSignificant(regressionPlotter.getrSquared(), 4);
							str = lang("y = {0}e^{1}x\nR^2 = {2}", base, exponent, rsquared);
						}
						else if ( regressionPlotter.currentTrendline.value == "Power")
						{
							base = StandardLib.roundSignificant(regressionPlotter.getCoefficients()[0], 4);
							exponent = StandardLib.roundSignificant(Math.exp(regressionPlotter.getCoefficients()[1]), 4);
							rsquared = StandardLib.roundSignificant(regressionPlotter.getrSquared(), 4);
							str = lang("y = {0}x^{1}\nR^2 = {2}", base, exponent, rsquared);
						}
						else if ( regressionPlotter.currentTrendline.value == "Logarithmic")
						{
							base = StandardLib.roundSignificant(regressionPlotter.getCoefficients()[1], 4);
							exponent = StandardLib.roundSignificant(regressionPlotter.getCoefficients()[0],4);
							rsquared = StandardLib.roundSignificant(regressionPlotter.getrSquared(), 4);
							str = lang("y = {0}ln(x)+{1}\nR^2 = {2}", base, exponent, rsquared);
						}
					}
				}
				else
				{ 
					if (equationText.parent)
						equationText.parent.removeChild(equationText);
				}
				equationText.text = str;
				lineEquation.text = StandardLib.replace(str, '\n', '    ');
				
				equationText.validateNow();
//				// severely hacked This needs to be fixed.
//				equationText.width = visualization.plotManager.marginLeftNumber.value * 8;
//				equationText.height = Math.min(equationText.textHeight + 14, visualization.plotManager.marginBottomNumber.value);
			}
			private function updateAxisLabels():void
			{
				visualization.bottomMarginColumn = plotter.dataX;
				visualization.leftMarginColumn = plotter.dataY;
				
				xAxisPlotter.setSideAxisName(
					ColumnUtils.getTitle(plotter.dataX), 
					0,   
					0, visualization.plotManager.marginBottomNumber.value - 3, 
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				
				yAxisPlotter.setSideAxisName(
					ColumnUtils.getTitle(plotter.dataY), 
					-90, 
					-visualization.plotManager.marginLeftNumber.value, 0, 
					BitmapText.VERTICAL_ALIGN_TOP
				);
			}
			
			public function labelFunctionX(value:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.dataX, value);
			}
			public function labelFunctionY(value:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.dataY, value);
			}
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			protected function createLegend():void
			{
				var sizeBinLegendTool:SizeBinLegendTool = Weave.root.requestObject(null, SizeBinLegendTool, false);
				sizeBinLegendTool.dynamicScatterPlotTool.globalName = Weave.root.getName(this);
			}
			
			private function updateColorPicker():void
			{
				if (!parent)
				{
					callLater(updateColorPicker);
					return;
				}
				
				if ( showColorPicker.value )
				{
					plotter.fill.color.defaultValue.value = overrideColor.value;
					plotter.fill.color.internalDynamicColumn.removeObject();
				}
				else
				{
					plotter.fill.color.defaultValue.value = NaN;
					plotter.fill.color.internalDynamicColumn.requestGlobalObject(_prevGlobalColorColumnName, ColorColumn, false);
				}
				scatterplotColorOverride.enabled = showColorPicker.value;
			}
			
			private var _prevGlobalColorColumnName:String = null;
			private function handleColorColumnChange():void
			{
				var newName:String = plotter.fill.color.internalDynamicColumn.globalName;
				if (newName)
					_prevGlobalColorColumnName = newName;
			}
			
			public const showColorPicker:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			public const overrideColor:LinkableNumber = registerLinkableChild(this, new LinkableNumber());
				
			private function enableAbsHandler(event:Event):void
			{
				if( colorOverrideCheckbox.selected ) colorOverrideCheckbox.selected = false;
			}
			
			private function enableOverrideHandler(event:Event):void
			{
				if( absoluteValueColorEnabledCheckbox.selected ) absoluteValueColorEnabledCheckbox.selected = false;
			}
			
			
			private function handlePlotterChange():void
			{
				// when the plotter settings change, update the slider interface
				if (plotter.absoluteValueColorEnabled.value)
				{
					sizeBySlider.thumbCount = 1;
					sizeBySlider.value = plotter.maxScreenRadius.value;
				}
				else if (plotter.enabledSizeBy.value)
				{
					sizeBySlider.thumbCount = 2;
					sizeBySlider.values = [plotter.minScreenRadius.value, plotter.maxScreenRadius.value];
				}
				else
				{
					sizeBySlider.thumbCount = 1;
					sizeBySlider.value = plotter.defaultScreenRadius.value;
				}
			}
			private function handleSizeSliderChange(event:SliderEvent):void
			{
				// when user interacts with slider, update session state
				if (plotter.absoluteValueColorEnabled.value)
				{
					plotter.maxScreenRadius.value = event.value;
				}
				else if (plotter.enabledSizeBy.value)
				{
					if(event.thumbIndex == 0)
					{
						plotter.minScreenRadius.value = event.value;
					}
					else
					{
						plotter.maxScreenRadius.value = event.value;
					}
				}
				else
				{
					plotter.defaultScreenRadius.value = event.value;
				}
			}
		]]>
	</mx:Script>
	<ui:AutoResizingTextArea id="equationText"
		editable="false"
		visible = "true"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		wordWrap="false"
		backgroundAlpha="0"
		borderThickness="0"
		bottom="0"
		left="0"/>
	<ui:ControlPanel>
		<mx:VBox id="VizControlsPanel" label="{lang('Visualization Controls')}">
			<ui:DynamicColumnComponent visTool="{this}" label="{lang('X')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = plotter.dataX"/>
			<ui:DynamicColumnComponent visTool="{this}" label="{lang('Y')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = plotter.dataY"/>
			<ui:DynamicColumnComponent visTool="{this}" label="{lang('Color')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = colorColumn" showLinkControl="false"/>
			<mx:CheckBox id="sizeByCheck" label="{lang('Size')}" fontWeight="bold" width="64" creationComplete="sizeSelector.addChildAt(sizeByCheck, 0);"/>
			<ui:DynamicColumnComponent id="sizeSelector" visTool="{this}" showLabel="false" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = plotter.screenRadius"/>
			<mx:HBox width="100%" verticalAlign="middle">
				
				<mx:Label text="{lang('Point Size:')}"/>
				<mx:HSlider id="sizeBySlider"
							liveDragging="true"
							width="100%"
							thumbCount="2"
							snapInterval="1"
							minimum="1" 
							maximum="60"
							tickInterval="5"
							change="handleSizeSliderChange(event)"
							mouseDown="event.stopImmediatePropagation();"/>
			</mx:HBox>
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:Label text="{lang('Point Opacity:')}" 
						  toolTip="{lang('Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}"/>
				
				<mx:HSlider id="alphaSlider" 
							width="100%" 
							alpha="1.0"
							dataTipFormatFunction="{PlotterUtils.alphaSliderFormatFunction}"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"/>
			</mx:HBox>
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 toolTip="{lang('Checking this box makes the x, y, color and size attributes visible in this tool\'s probe tooltip')}"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<mx:Button label="{lang('Show legend')}" click="createLegend()"/>
		</mx:VBox>
		<mx:VBox id="AdvancedPanel" label="{lang('Advanced')}">
			
			<!-- @author fkamayou 
				 Beginning of trendline option 
			-->
			<mx:VBox>
				<mx:CheckBox id= "trendlineCheckBox" label="{lang('Enable Trendline (Requires Rserve on the server)')}"
						  	 toolTip="Use the dropdown menu to choose a trendline."
							 creationComplete="linkBindableProperty(regressionPlotter.drawLine, event.target, 'selected')"/>
				<ui:Indent>
					<mx:HBox>
						<mx:ComboBox enabled="{trendlineCheckBox.selected}" 
									 id="trendlineComboBox" dataProvider="{regressionPlotter.trendlines}"
									 creationComplete="linkBindableProperty(regressionPlotter.currentTrendline,event.target,'selectedItem')"/>
						<mx:Label text = "{lang('Degree')}" />
						<mx:HSlider id=	"polynomialDegreeSlider"
									creationComplete="linkBindableProperty(regressionPlotter.polynomialDegree, event.target, 'value')"									
									enabled="{trendlineComboBox.selectedItem == 'Polynomial'}"
									minimum = "2" maximum ="6" snapInterval="1" liveDragging="false"
									tickInterval="1"/>
					</mx:HBox>
				</ui:Indent>				
				<!-- <mx:CheckBox id="regressionLineCheckBox" label="{lang('Enable regression line (Requires Rserve on the server)')}"
							 creationComplete="linkBindableProperty(regressionPlotter.drawLine,event.target,'selected')"/>
				-->
				<ui:Indent>
					<mx:VBox>
						<mx:Label id="lineEquation" text="{lang('Equation')}"/>
						<mx:CheckBox id="hideEquationCheckBox" label="{lang('Show equation')}" labelPlacement="right"
									 creationComplete="linkBindableProperty(this.isVisibleEquationTextBoolean, event.target, 'selected')"/>
						<mx:HBox>
							<mx:Label text="{lang('Line Color')}" />
							<mx:ColorPicker id="regressionColorPicker" 
											creationComplete="linkBindableProperty(regressionPlotter.lineStyle.color.defaultValue, event.target, 'selectedColor')"
											enabled="{trendlineCheckBox.selected}"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{lang('Line Thickness')}" />
							<mx:HSlider id="regressionThicknessSlider"
										creationComplete="linkBindableProperty(regressionPlotter.lineStyle.weight.defaultValue, event.target, 'value')"
										enabled="{trendlineCheckBox.selected}"
										minimum="1" maximum="10" snapInterval="1" liveDragging="true"
										tickInterval="1"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{lang('Line Opacity')}" />
							<mx:HSlider id="regressionAlphaSlider"
										enabled="{trendlineCheckBox.selected}"
										minimum="0.1" maximum="1" snapInterval=".1" liveDragging="true"
										tickInterval="0.1"
										creationComplete="linkBindableProperty(regressionPlotter.lineStyle.alpha.defaultValue, event.target, 'value')"/>
						</mx:HBox>
					</mx:VBox>
				</ui:Indent>
			</mx:VBox>
			<mx:HBox>
				<mx:CheckBox id="colorOverrideCheckbox" label="{lang('Override Global Color')}" creationComplete="linkBindableProperty(showColorPicker,event.target,'selected')"
							 change="enableOverrideHandler(event)"/>
				<mx:ColorPicker id="scatterplotColorOverride" creationComplete="linkBindableProperty(overrideColor,event.target,'selectedColor')"/>
			</mx:HBox>
			<mx:VBox>
				<mx:HBox>
					<mx:CheckBox id="absoluteValueColorEnabledCheckbox" label="{lang('Color by positive or negative \'size\' column values')}"
								 creationComplete="linkBindableProperty(plotter.absoluteValueColorEnabled, event.target, 'selected')"
								 change="enableAbsHandler(event)"/>
					<ui:HelpComponent>
						Select this option to highlight the differences in your 'size' column.
						* All values greater than 0 radius will be one color.
						* All values less than 0 radius will be another color.
						* If you have a size of 0 radius the circle will not be drawn.
						
						** If a size column is not specified, nothing will be drawn in this mode.
					</ui:HelpComponent>
				</mx:HBox>
				<ui:Indent>
					<mx:VBox>
						<mx:HBox>
							<mx:Label text="{lang('Color for values &lt; 0')}" />
							<mx:ColorPicker id="absoluteValueMinColorPicker" 
											creationComplete="linkBindableProperty(plotter.absoluteValueColorMin, event.target, 'selectedColor')"
											enabled="{absoluteValueColorEnabledCheckbox.selected}" />
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{lang('Color for values &gt; 0')}" />
							<mx:ColorPicker id="absoluteValueMaxColorPicker" 
											creationComplete="linkBindableProperty(plotter.absoluteValueColorMax, event.target, 'selectedColor')"
											enabled="{absoluteValueColorEnabledCheckbox.selected}" />
						</mx:HBox>
					</mx:VBox>
				</ui:Indent>
			</mx:VBox>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
