<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
	     layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.PieChartHistogramPlotter;

			WeaveAPI.registerImplementation(IVisTool, PieChartHistogramTool, lang("Pie Chart Histogram"));
			
			public var _plotter:PieChartHistogramPlotter = null;
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(PieChartHistogramPlotter, false);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.plotManager.enableFixedAspectRatio.value = true;
				
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				initColumnDefaults(_plotter.unfilteredData);
				_plotter.binnedData.addImmediateCallback(this,updateProbeColumns,true);
				
				visualization.plotManager.marginTop.value = "65";
				visualization.plotManager.marginBottom.value = "65";
				visualization.plotManager.marginLeft.value = "85";
				visualization.plotManager.marginRight.value = "85";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				cRampEditor.colorRamp = _plotter.chartColors;
				linkSessionState(_plotter.binnedData, binEditor.binnedColumn);
			}
			
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Data"];
			}
			override public function getSelectableAttributes():Array
			{
				return [(_plotter.binnedData.getInternalColumn() as FilteredColumn).internalDynamicColumn];
			}
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [];
					if (_plotter.binnedData.getInternalColumn())
						visualization.additionalProbeColumns.push(_plotter.binnedData.getInternalColumn());
					if (visualization.additionalProbeColumns.length == 0)
						visualization.additionalProbeColumns = null;
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			
			private function invalidateAxes():void
			{
				handlePanelTitleChange();
			}
			
			override protected function get defaultPanelTitle():String
			{
				return lang("[Pie Chart Histogram] of {0}", ColumnUtils.getTitle(_plotter.unfilteredData));
			}
			
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox label="{lang('Binning')}">
			<ui:DynamicColumnComponent visTool="{this}" label="data" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = (_plotter.binnedData.getInternalColumn() as FilteredColumn).internalDynamicColumn"/>
			<ui:BinningDefinitionEditor id="binEditor"/>
		</mx:VBox>
		<mx:VBox id="attributesPanel" label="{lang('Display')}">
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 toolTip="{lang('Checking this box makes all of the following attributes visible in this tool\'s probe tooltip')}"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<ui:Indent label="{lang('Label angle')}">
				<mx:HSlider
							snapInterval="0.25" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
							dataTipFormatFunction="{function(v:Number):String { return String(Math.round(100*v))+'%' }}"
							creationComplete="linkBindableProperty(_plotter.labelAngleRatio, event.target, 'value')"/>
			</ui:Indent>
			<mx:HBox width="100%">
				<mx:Label text="{lang('Inner radius')}"/>
				<mx:HSlider
					snapInterval="0.05" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
					creationComplete="linkBindableProperty(_plotter.innerRadius, event.target, 'value')"/>
			</mx:HBox>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
