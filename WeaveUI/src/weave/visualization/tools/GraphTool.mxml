<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!--- 
	I apologize to those who must maintain or modify this code... 
	@author kmonico
	@author pkovac
-->

<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.graphs.IGraphAlgorithm;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.primitives.IBounds2D;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.KeySet;
			import weave.primitives.Bounds2D;
			import weave.visualization.plotters.GraphLabelPlotter;
			import weave.visualization.plotters.GraphPlotter;
			import flash.external.ExternalInterface;

			WeaveAPI.registerImplementation(IVisTool, GraphTool, lang("Graph Tool"));
			
			[Bindable] public var _plotter:GraphPlotter = null;
			public var _labelPlotter:GraphLabelPlotter = null;
			public var primitiveNetwork:Object = null;
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(GraphPlotter, false);
				// create new label layer
				var labelLayerName:String = visualization.plotManager.plotters.generateUniqueName("label");
				_labelPlotter = visualization.plotManager.plotters.requestObject(labelLayerName, GraphLabelPlotter, true);
				visualization.plotManager.plotters.setNameOrder([ labelLayerName ]);
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.plotManager.enableFixedAspectRatio.value = true;
				visualization.enableZoomAndPan.value = false;
				visualization.enableSelection.value = false;

				_plotter.nodesColumn.addImmediateCallback(this, updateProbeColumns);
				_plotter.algorithmRunning.addGroupedCallback(this, handleAlgorithmRunning, false);
				
				linkSessionState(_plotter.radius, _labelPlotter.radius);
				_plotter.layoutAlgorithm.addImmediateCallback(this, handleLayoutAlgorithmChange, true);
				linkSessionState(_plotter.nodesColumn, _labelPlotter.nodesColumn);
				linkSessionState(_plotter.edgeSourceColumn, _labelPlotter.edgeSourceColumn);
				linkSessionState(_plotter.edgeTargetColumn, _labelPlotter.edgeTargetColumn);


			}
			
			private function buildPrimitiveNodes():Array
			{
				var nodesKeys:Array = nodesColumn.keys;
				var numNodes:int = nodesKeys.length;
				var key_idx:int;
				var key:IQualifiedKey;
				var id:String;
				var label:String;
				var node:Object;
				var nodes:Array = [];
				for (key_idx = 0; key_idx < numNodes; key_idx++)
				{
					node = {};
					key = nodesKeys[key_idx];
					node.id = nodesColumn.getValueFromKey(key, String);
					node.label = labelColumn.getValueFromKey(key, String);
					node.keyType = key.keyType;
					node.localName = key.localName;
					nodes.push(node);
				}
				
				return nodes;
			}
			private function buildPrimitiveEdges():Array
			{
				var edgeKeys:Array = edgeSourceColumn.keys;
				var numEdges:int = edgeKeys.length;
				var key_idx:int;
				var key:IQualifiedKey;
				var id:String;
				var label:String;
				var edge:Object;
				var edges:Array = [];
				for (key_idx = 0; key_idx < numEdges; key_idx++)
				{
					edge = {};
					key = edgeKeys[key_idx];
					edge.id = key.localName;
					edge.source = edgeSourceColumn.getValueFromKey(key, String);
					edge.target = edgeTargetColumn.getValueFromKey(key, String);
					edge.keyType = key.keyType;
					edge.localName = key.localName;
					edges.push(edge);
				}
				
				return edges;
			}
			public function buildPrimitiveNetwork():void
			{
				var network:Object = {data: {nodes: [], edges: []}};
				network.dataSchema = {
					nodes: [{name: "label", type: "string"}, {name: "keyType", type: "string"}, {name: "localName", type: "string"}],
					edges: [{name: "label", type: "string"}, {name: "keyType", type: "string"}, {name: "localName", type: "string"}]
				};
				network.data.nodes = buildPrimitiveNodes();
				network.data.edges = buildPrimitiveEdges();
				primitiveNetwork = network;
			}
			public function initializeCytoscapeWindow():void
			{
				ExternalInterface.call(
				"function (objectID, url, name) { var weave = objectID ? document.getElementById(objectID) : document;\
				 weave.cytoscape = window.open(url, name);\
				  }", ExternalInterface.objectID, "cytoscapeweb/popout.html", "WeaveCytoscapePopout");
			}
			public function invokeCytoscapePlotter():void
			{
				buildPrimitiveNetwork();
				/* Invoke the cytoscape plotter with whatever our current data is. */
				ExternalInterface.call("function (objectID, network) { var weave = objectID ? document.getElementById(objectID) : document;\
					weave.cytoscape.network = JSON.parse(JSON.stringify(network));\
					weave.cytoscape.draw(network); }", ExternalInterface.objectID, primitiveNetwork);
				//ExternalInterface.call("function (param) {console.log(param)}", [cytoscapeWindow, primitiveNetwork]);
				return;
			}
			private function handleLayoutAlgorithmChange():void
			{
				_labelPlotter.layoutAlgorithm = _plotter.layoutAlgorithm.internalObject as IGraphAlgorithm;
				_labelPlotter.runCallbacks(); //getCallbackCollection(_labelPlotter).triggerCallbacks();
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				colorComponent.dynamicObject = colorColumn;
				nodeComponent.dynamicObject = nodesColumn;
				labelComponent.dynamicObject = labelColumn;
				edgeSourceComponent.dynamicObject = edgeSourceColumn;
				edgeTargetComponent.dynamicObject = edgeTargetColumn;
				edgeColorComponent.dynamicObject = edgeColorColumn.internalDynamicColumn;
				edgeThicknessComponent.dynamicObject = edgeThicknessColumn;
				nodeRadiusComponent.dynamicObject = nodeRadiusColumn;

				linkBindableProperty(_plotter.drawCurvedLines, drawCurvedLines, 'selected');
				linkBindableProperty(_plotter.radius, numRadiusSize, 'value');
				linkBindableProperty(includeToolAttributesInProbe, probeColumnsCheckBox, 'selected');
				linkBindableProperty(_plotter.currentAlgorithm, algorithmChoice, 'selectedItem');
				linkBindableProperty(_plotter.edgeStyle, edgeStyleChoice, 'selectedItem');

				this.contextMenu = (WeaveAPI.topLevelApplication as InteractiveObject).contextMenu;
//				CustomContextMenuManager.createAndAddMenuItemToDestination('Layout Graph', this, handleLayoutGraph_click);
//				CustomContextMenuManager.createAndAddMenuItemToDestination('Scale Selection', this, handleScaleSelection_click);
//				CustomContextMenuManager.createAndAddMenuItemToDestination('Reset Positions', this, handleResetPositions);
							
				addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);
				addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
				addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);

				initializeCytoscapeWindow();
			}

			/***********************************************************
			 * the event listeners for MouseEvents                     *
			 ***********************************************************/
			private var _isDragging:Boolean = false;
			private var _probedKeys:Array = [];
			private var _probedKey:IQualifiedKey = null;
			private const _dragSourcePoint:Point = new Point();
			private function handleMouseMove(event:MouseEvent):void
			{
				if (!_isDragging)
					return;

				var screenPoint:Point = projectGlobalToScreen(event.stageX, event.stageY);
				var dataPoint:Point = projectScreenPointToData(screenPoint);
				var dx:Number = dataPoint.x - _dragSourcePoint.x;
				var dy:Number = dataPoint.y - _dragSourcePoint.y;
				_plotter.updateDraggedKeys(_probedKeys, dx, dy, false);
				getCallbackCollection(_labelPlotter).triggerCallbacks();
				_dragSourcePoint.x = dataPoint.x;
				_dragSourcePoint.y = dataPoint.y;
			}
			private var _tempBoundsArray:Array = [];
			private function handleMouseDown(event:MouseEvent):void
			{
				var ctrlKey:Boolean = WeaveAPI.StageUtils.ctrlKey;
				var shiftKey:Boolean = WeaveAPI.StageUtils.shiftKey;
				visualization.enableSelection.value = ctrlKey || shiftKey;
				if (ctrlKey || shiftKey)
					return;	

				var probedKey:IQualifiedKey = visualization.lastProbedKey;
				if (!probedKey)
					return;
				var _keySet:KeySet = mainLayerSettings.selectionFilter.internalObject as KeySet;
				_probedKeys = _keySet ? _keySet.keys.concat() : []; // save these keys
				_plotter.getDataBoundsFromRecordKey(probedKey, _tempBoundsArray);
				if (!_tempBoundsArray || _tempBoundsArray.length == 0)
					return;
				var bounds:IBounds2D = _tempBoundsArray[0];
				
				if (_probedKeys.indexOf(probedKey) < 0)
					_probedKeys.push(probedKey);
				
				_dragSourcePoint.x = bounds.getXCenter();
				_dragSourcePoint.y = bounds.getYCenter();
				_probedKey = probedKey;
				_isDragging = true;
				
//				_plotter.setDraggableLayerKeys(_probedKeys);
			}
			private function handleMouseUp(event:MouseEvent):void
			{
				visualization.enableSelection.value = false;
				
				// if we aren't dragging, return
				if (_isDragging == false)
					return;
				
				// stop dragging
				_isDragging = false;
				var screenPoint:Point = projectGlobalToScreen(event.stageX, event.stageY);
				var dataPoint:Point = projectScreenPointToData(screenPoint);
				var dx:Number = dataPoint.x - _dragSourcePoint.x;
				var dy:Number = dataPoint.y - _dragSourcePoint.y;
				_plotter.updateDraggedKeys(_probedKeys, dx, dy, true);
				getCallbackCollection(_labelPlotter).triggerCallbacks();
			}
			private function handleLayoutGraph_click(event:ContextMenuEvent):void
			{
				_plotter.resetIterations(1);
				var keySet:IKeySet = mainLayerSettings.selectionFilter.internalObject as IKeySet;
				var keys:Array = (keySet && keySet.keys.length > 0) ? keySet.keys : null;
				_plotter.continueComputation(keys);
			}
			private function handleScaleSelection_click(event:ContextMenuEvent):void
			{
				var keySet:IKeySet = mainLayerSettings.selectionFilter.internalObject as IKeySet;
				var keys:Array = (keySet && keySet.keys.length > 0) ? keySet.keys : null;
				_plotter.scaleNodes(keys, 2);
			}
			private function handleResetPositions(event:ContextMenuEvent):void
			{
				_plotter.resetIterations(1);
				_plotter.resetAllNodes();
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [lang("Color"), lang("Node IDs"), lang("Label"), lang("Edge Source IDs"), lang("Edge Target IDs"), lang("Edge Color Column")];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.colorColumn, _plotter.nodesColumn, _labelPlotter.labelColumn, _plotter.edgeSourceColumn, _plotter.edgeTargetColumn, _plotter.edgeColorColumn];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
//			public const showLabels:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(), handleShowLabels);
			private function updateProbeColumns():void
			{
				if (!_plotter)
					return;
				
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [ _plotter.nodesColumn ];//.getObjects(IAttributeColumn);
					if (visualization.additionalProbeColumns.length == 0) 
						visualization.additionalProbeColumns = null;
				}
				else 
					visualization.additionalProbeColumns = null;
			}

			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			public function get nodesColumn():DynamicColumn { return _plotter.nodesColumn; }
			public function get nodeRadiusColumn():DynamicColumn { return _plotter.nodeRadiusColumn; }
			public function get labelColumn():DynamicColumn { return _labelPlotter.labelColumn; }
			public function get edgeSourceColumn():DynamicColumn { return _plotter.edgeSourceColumn; }
			public function get edgeTargetColumn():DynamicColumn { return _plotter.edgeTargetColumn; }
			public function get edgeColorColumn():AlwaysDefinedColumn { return _plotter.edgeColorColumn; }
			public function get edgeThicknessColumn():DynamicColumn { return _plotter.edgeThicknessColumn; }
			
			[Bindable] private var algorithmRunning:Boolean = false;
			[Bindable] private var shouldStop:Boolean = false; 
			private function handleStartComputation():void 
			{ 
				algorithmRunning = true;
				shouldStop = false;
				_plotter.algorithmRunning.value = true;
				_plotter.shouldStop.value = false;
				_plotter.recomputePositions();
			}
//			private function handleStopComputation(event:ContextMenuEvent = null):void
//			{
//				if (!algorithmRunning)
//					return;
//				
//				shouldStop = true;
//				algorithmRunning = false;
//				_plotter.algorithmRunning.value = false;
//				_plotter.shouldStop.value = true;
//			}
//			private function handleContinueComputation():void
//			{
//				algorithmRunning = true;
//				shouldStop = false;
//				_plotter.algorithmRunning.value = true;
//				_plotter.shouldStop.value = false;
//				_plotter.continueComputation(null);
//			}
			private function handleAlgorithmRunning():void
			{
				algorithmRunning = _plotter.algorithmRunning.value;
				shouldStop = !algorithmRunning;					
			}

			
			
			/********************************************
			 * utility functions and temporary objects  *
			 ********************************************/
			
			private function projectGlobalToScreen(x:Number, y:Number):Point
			{
				_tempPoint.x = x;
				_tempPoint.y = y;
				return visualization.globalToLocal(_tempPoint);
			}
			private function projectScreenPointToData(p:Point):Point
			{
				var dataBounds:IBounds2D = getDataBounds();
				var screenBounds:IBounds2D = getScreenBounds();
				screenBounds.projectPointTo(p, dataBounds);
				return p;
			}
			private function getDataBounds():IBounds2D
			{
				visualization.plotManager.zoomBounds.getDataBounds(_dataBounds);
				return _dataBounds;
			}
			private function getScreenBounds():IBounds2D
			{
				visualization.plotManager.zoomBounds.getScreenBounds(_screenBounds);
				return _screenBounds;
			}
			private function projectBoundsToData(b:IBounds2D):IBounds2D
			{
				var dataBounds:IBounds2D = getDataBounds();
				var screenBounds:IBounds2D = getScreenBounds();
				screenBounds.projectCoordsTo(b, dataBounds);
				return _tempBounds;
			}

			private const _screenBounds:IBounds2D = new Bounds2D();
			private const _dataBounds:IBounds2D = new Bounds2D();
			private const _tempBounds:IBounds2D = new Bounds2D();
			private const _tempPoint:Point = new Point();
			
//			private function handleShowLabels():void
//			{
//				setSessionState(_labelPlotter.labelColumn, labelColumn);
//				setSessionState(_labelPlotter.nodesColumn, nodesColumn);
//				setSessionState(_labelPlotter.colorColumn, colorColumn);
//				setSessionState(_labelPlotter.radius, _plotter.radius);
//				_labelPlotter.setBaseKeySource(_plotter.keySet);
//				var newNameOrder:Array = [visualization.layers.getName(_plotter)];
//				if (showLabels.value)
//					newNameOrder.unshift(visualization.layers.getName(_labelPlotter));
//				visualization.layers.setNameOrder(newNameOrder);				
//			}
			
		]]>
	</mx:Script>
	
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Attributes for Graph')}">
			<ui:DynamicColumnComponent visTool="{this}" id="colorComponent" label="{lang('Node Color')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="nodeComponent" label="{lang('Nodes')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="nodeRadiusComponent" label="{lang('Node Size')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="labelComponent" label="{lang('Labels')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeSourceComponent" label="{lang('Edge Sources')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeTargetComponent" label="{lang('Edge Targets')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeColorComponent" label="{lang('Edge Colors')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeThicknessComponent" label="{lang('Edge Thickness')}"/>
		</mx:VBox>
		<mx:VBox id="VizControlsPanel" label="{lang('Visualization Controls')}">
			<!--<mx:CheckBox label="('Show Labels:" id="chkShowLabels"
			creationComplete="linkBindableProperty(showLabels, event.target, 'selected');"/>-->
			<!--<mx:HBox width="100%" 
					 borderStyle="inset">
				<mx:Label text="Point Opacity:" 
						  toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
				
				<mx:HSlider id="alphaSlider"
							width="100%"
							alpha="1.0"
							snapInterval="0.1"
							tickInterval="0.1" labels="{['10%', '30%', '50%', '70%', '90%', '100%']}"
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"
			creationComplete="linkBindableProperty(_plotter.alphaColumn.defaultValue, event.target, 'value')"/>
			</mx:HBox>-->
			<mx:HBox>
				<mx:Label text="{lang('Radius Size')}"
						  toolTip="{lang('Use this option to control the default size of the each node in the graph.')}"/>
				<mx:NumericStepper id="numRadiusSize" minimum="1"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="{lang('Curved Lines')}"
						  toolTip="{lang('Use this option to specify drawing with curved lines instead of a gradient for doubly connected nodes.')}"/>
				<mx:CheckBox id="drawCurvedLines"/>
			</mx:HBox>
			<mx:CheckBox id="undirectedCheckBox" label="{lang('Undirected edges.')}" 
				toolTip="{lang('Use this option if you want your graph data to be assumed as undirected.')}"/>
			<mx:HBox>
				<mx:Label text="{lang('Edge Style:')}"
					toolTip="{lang('Use this option to specify which edge style (arrowheads, gradients, or wedges) to use to indicate edge directions.')}"/>
				<mx:ComboBox id="edgeStyleChoice" dataProvider="{_plotter.edgeStyles}"/>
			</mx:HBox>
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 toolTip="{lang('Checking this box makes all of the following attributes visible in this tool\'s probe tooltip')}"/>
			<mx:HBox>
				<mx:Label text="{lang('Layout Algorithm')}"/>
				<mx:ComboBox id="algorithmChoice"  dataProvider="{_plotter.algorithms}"/>
			</mx:HBox>
			<mx:VBox>
				<mx:Button id="recomputePositions" enabled="{!algorithmRunning}" label="{lang('Recalculate Node Positions')}" click="handleStartComputation()"/> 
			</mx:VBox>
		</mx:VBox>
		
		
	</ui:ControlPanel>
</SimpleVisTool>
