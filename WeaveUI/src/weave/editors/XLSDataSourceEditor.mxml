<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.ILinkableObjectEditor" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{lang( (_xlsDataSource ? 'Edit' : 'Add') + ' XLS Data Source' )}"/>
	<ui:Indent label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="200"/>
	</ui:Indent>
	<ui:Indent label="{lang('Source URL *')}">
		<mx:TextInput change="handleURLTextChange()" id="url" width="300" toolTip="{lang('enter the url of your CSV source file e.g. : http://vis.weave.com/MA_municipal_indicators.csv')}"/>
	</ui:Indent>
	
	<mx:HBox visible="{uploadSection.visible}" horizontalAlign="center" width="100%">
		<mx:Label fontWeight="bold" text="{lang('OR')}"/>
	</mx:HBox>
	<ui:Indent id="uploadSection" label="{lang('Open local XLS file *')}">
		<mx:Button label="{lang('Browse')}" click="browseForFiles()"/>
		<mx:Label id="uploadMessg" color="0xFF0000" text="{lang('loaded')}" visible="false"/>
	</ui:Indent>
	
	<ui:KeyTypesMenu indent="{uploadSection.labelComponent.width}"  id="keyTypeSelector"
					 creationComplete="{if(_xlsDataSource)
					 {
					 (event.target as KeyTypesMenu).addKeyTypeToMenu(_xlsDataSource.keyType.value);
					 (event.target as KeyTypesMenu).selectedItem = _xlsDataSource.keyType.value;
					 }}"/>
	<ui:Indent label="{lang('Key Column')}">
		<mx:TextInput id="keyColumnName" width="200" toolTip="{lang('enter the column name that uniquely identifies each row in the data set')}"/>
	</ui:Indent>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Button enabled="false" label="{lang('View data in Grid')}" id="showGridButton" click="showGrid()"/>
	<mx:Script>
		<![CDATA[
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.data.DataSources.XLSDataSource;
			import weave.editors.managers.EditDataGridPanel;
			
			override protected function createChildren():void
			{
				super.createChildren();
				keyTypeSelector.labelText +=" *";
				sourceName.text = Weave.root.generateUniqueName("XLSDataSource");
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
			}
			
			[Bindable] private var _xlsDataSource:XLSDataSource = null;
			public function setTarget(object:ILinkableObject):void
			{
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				_xlsDataSource = object as XLSDataSource;
				if (_xlsDataSource)
				{
					sourceName.text = Weave.root.getName(_xlsDataSource);
					url.text = _xlsDataSource.url.value;
					keyColumnName.text = _xlsDataSource.keyColName.value;
					keyTypeSelector.addKeyTypeToMenu(_xlsDataSource.keyType.value);
					uploadSection.visible = false;
					showGridButton.visible = false;
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
				}
			}
			
			public function applyChanges():void
			{
				try
				{
					_xlsDataSource.url.value = url.text;
					_xlsDataSource.keyColName.value = keyColumnName.text;
					_xlsDataSource.keyType.value = keyTypeSelector.selectedItem as String;
					Alert.show(lang("Changes saved."));
				}
				catch(e:Error)
				{
					Alert.show(lang("Changes could not be saved. ") + e.message,lang("Error"));
				}
			}
			
			
			
			
			private var _fileLoader:FileReference = null;
			
			
			/**
			 * browseForfiles: opens up a file browser window to upload CSV files 
			 **/
			private function browseForFiles():void
			{
				if (_fileLoader == null)
				{
					_fileLoader = new FileReference();
					_fileLoader.addEventListener(Event.SELECT, handleDatasetSelected);
					_fileLoader.addEventListener(Event.COMPLETE, handleDatasetLoaded);
				}
				
				_fileLoader.browse([new FileFilter("XLS", "*.xls")]);
			}
			
			
			private function handleDatasetSelected(event:Event):void
			{
				_fileLoader.load();
			}
			
			
			
			
			
			public var xlsDataArray:Array = [];

			//this will hold the header columns as was loaded when the data is initially loaded.
			//This is done so that the data gird shows the columns in the same order it was uploaded.
			private var headerArray:Array = [];
			
			public var xlsFile:ExcelFile = null;
			private function handleDatasetLoaded(event:Event):void
			{
				// the file extension should be at the end of the file minus the four characters for the extension (i.e. ".csv" )
				var extensionPosition:int = _fileLoader.name.length - 4;
				
				xlsFile = new ExcelFile();
				try
				{				
					if (_fileLoader.name.search(".xls") == extensionPosition || _fileLoader.name.search(".XLS") == extensionPosition )
					{
						xlsFile.loadFromByteArray(event.target.data);
						
						
						xlsDataArray = convertSheetsToArrays(xlsFile.sheets[0]);
						
						uploadMessg.visible = true;
						showGridButton.enabled=true;
						//clearing the Source URL text input
						url.text = "";
					}
				}
				catch (e:Error)
				{
					Alert.show(lang("Error uploading file"),e.message.toString());
				}
				
				
			}
			
			private function showGrid():void
			{
				if (xlsFile.sheets.length == 0)
				{
					Alert.show(lang("No data found"));
					return;
				}
				var grid:EditDataGridPanel = PopUpManager.createPopUp(this, EditDataGridPanel) as EditDataGridPanel;
				
				
				var xlsData:Array = WeaveAPI.CSVParser.convertRowsToRecords(xlsDataArray);
				
				grid.loadXLSData(xlsData, xlsDataArray[0]);
				
				PopUpManager.bringToFront(grid);
			}
			
			
			private function handleURLTextChange():void
			{
				uploadMessg.visible = false;
				showGridButton.enabled = false;
				xlsFile = null;
			}
			
			private function convertSheetsToArrays(xlsSheet:Sheet):Array
			{
				var paramArray:Array = new Array();
				
				var xlsArrayCollection:ArrayCollection = xlsSheet.values;
				
				for (var i:int = 0; i < xlsArrayCollection.length; i++)
				{
					paramArray[i] = [];
					for (var j:int = 0; j < xlsArrayCollection[i].length; j++)
					{
						paramArray[i].push((xlsArrayCollection[i][j] as Cell).value);
					}
				}
				
				return paramArray;
			}
			
		]]>
	</mx:Script>
</mx:VBox>