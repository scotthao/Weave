<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<ui:ControlPanel xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns="weave.editors.*"
			xmlns:ui="weave.ui.*"
			backgroundColor="#EFF4BC"
			title="{lang('Preferences')}"
			targets="{[Weave.properties]}"
			>
	<WeavePropertiesAppearanceEditor label="{lang('Appearance')}"/>
	
	<WeavePropertiesMenuEditor label="{lang('Menus')}"/>
	
	<mx:VBox label="Interactivity">
		<mx:CheckBox label="{lang('Enable probing')}"
					 creationComplete="linkBindableProperty(Weave.properties.enableToolProbe,event.target,'selected')"/>
		<mx:CheckBox label="{lang('Enable selection')}"
					 creationComplete="linkBindableProperty(Weave.properties.enableToolSelection, event.target, 'selected');"/>
		<mx:CheckBox label="{lang('Enable control panels and attribute selection')}"
					 creationComplete="linkBindableProperty(Weave.properties.enableToolControls, event.target, 'selected');"/>
		<mx:CheckBox label="{lang('Enable axis tool tips')}"
					 creationComplete="linkBindableProperty(Weave.properties.enableAxisToolTips, event.target, 'selected');"/>
	</mx:VBox>
	
	<WeavePropertiesProbingEditor label="{lang('Probing')}"/>
	
	<WeavePropertiesSelectionEditor label="{lang('Selection')}"/>
	
	<mx:VBox label="{lang('Advanced')}" width="100%" height="100%">
		<ui:Indent label="{lang('Streaming geometry bounding box request mode')}">
			<ui:CustomComboBox id="geometryMetadataRequestMode"/>
			<ui:HelpComponent>This controls how metadata tile requests are filtered based on the map zoom level.  Unless all metadata tiles are requested for the current X-Y range, selection and probing on the map will not catch the shapes that are too small to be seen.</ui:HelpComponent>
		</ui:Indent>
		<ui:Indent label="{lang('Do not render geometry detail with pixel area less than')}">
			<mx:NumericStepper width="64" minimum="1" maximum="100" stepSize="1" creationComplete="linkBindableProperty(Weave.properties.geometryMinimumScreenArea, event.target, 'value');"/>
			<ui:HelpComponent>This controls the filtering of vector tile requests and rendering.  Enter the minimum area requirement (in pixels) for geometry detail to be rendered.</ui:HelpComponent>
		</ui:Indent>
		
		<mx:VBox width="100%">
			<ui:Indent label="{lang('Max computation time per frame')}">
				<mx:NumericStepper id="maxComputationTime" minimum="10" maximum="200" stepSize="10"/>
			</ui:Indent>
			
			<mx:Label text="{lang('Asynchronous task time allocation (milliseconds):')}"/>
			<ui:Indent label="{lang('Render')}">
				<mx:HSlider id="renderAlloc" minimum="5" maximum="200" snapInterval="5" liveDragging="true" change="setAlloc(event)" width="100%"/>
			</ui:Indent>
			<ui:Indent label="{lang('Build')}">
				<mx:HSlider id="buildAlloc" minimum="5" maximum="200" snapInterval="5" liveDragging="true" change="setAlloc(event)" width="100%"/>
			</ui:Indent>
			<ui:Indent label="{lang('Parse')}">
				<mx:HSlider id="parseAlloc" minimum="5" maximum="200" snapInterval="5" liveDragging="true" change="setAlloc(event)" width="100%"/>
			</ui:Indent>
		</mx:VBox>
		
		<mx:Button label="{lang('Edit Macros')}" width="100" click="openMacroEditor(event)" />
		
		<mx:HBox>
			<mx:CheckBox label="{lang('Enable experimental filtering controls')}" creationComplete="linkBindableProperty(Weave.properties.getToolToggle(DataFilter), event.target, 'selected');"/>
			<ui:HelpComponent>
				This will include "Add Data Filter" as an option in the tools menu and show experimental filtering controls in the attribute selector.
			</ui:HelpComponent>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.linkBindableProperty;
			import weave.core.StageUtils;
			import weave.data.AttributeColumns.StreamedGeometryColumn;
			import weave.ui.DataFilter;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				geometryMetadataRequestMode.dataProvider = StreamedGeometryColumn.metadataRequestModeEnum;
				linkBindableProperty(StreamedGeometryColumn.metadataRequestMode, geometryMetadataRequestMode, 'selectedItem');
				linkBindableProperty(Weave.properties.maxComputationTimePerFrame, maxComputationTime, 'value');
				
				// time allocation
				renderAlloc.value = (WeaveAPI.StageUtils as StageUtils).getTaskPriorityTimeAllocation(WeaveAPI.TASK_PRIORITY_RENDERING);
				buildAlloc.value = (WeaveAPI.StageUtils as StageUtils).getTaskPriorityTimeAllocation(WeaveAPI.TASK_PRIORITY_BUILDING);
				parseAlloc.value = (WeaveAPI.StageUtils as StageUtils).getTaskPriorityTimeAllocation(WeaveAPI.TASK_PRIORITY_PARSING);
			}
			
			private function setAlloc(event:Event):void
			{
				var slider:HSlider = event.currentTarget as HSlider;
				var sliderIndex:int = [renderAlloc, buildAlloc, parseAlloc].indexOf(slider);
				var priority:int = [WeaveAPI.TASK_PRIORITY_RENDERING, WeaveAPI.TASK_PRIORITY_BUILDING, WeaveAPI.TASK_PRIORITY_PARSING][sliderIndex];
				(WeaveAPI.StageUtils as StageUtils).setTaskPriorityTimeAllocation(priority, slider.value);
			}
			
			private static var _instance:ControlPanel;
			
			/**
			 * Opens a static instance of the User Preferences Panel and adds it to the stage as a PopUp
			 */
			public static function openGlobalEditor():void
			{
				if (!_instance)
					_instance = new WeavePropertiesEditor();
				
				if (!_instance.parent)
					PopUpManager.addPopUp(_instance, WeaveAPI.topLevelApplication as DisplayObject);
				
				_instance.restorePanel();
			}
			
			protected function openMacroEditor(event:MouseEvent):void
			{
				var mEditor:MacroEditor = new MacroEditor();
				PopUpManager.addPopUp(mEditor, WeaveAPI.topLevelApplication as DisplayObject);
				mEditor.restorePanel();
			}
		]]>
	</mx:Script>
</ui:ControlPanel>
