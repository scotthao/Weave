<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.ILinkableObjectEditor" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{lang((_csvDataSource ? 'Edit' : 'Add') + ' CSV Data Source')}"/>
	<ui:Indent group="{indentGroup}" label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="100%"/>
	</ui:Indent>
	<ui:Indent group="{indentGroup}" label="{lang('Source URL')}">
		<mx:TextInput change="handleURLTextChange()" id="url" width="100%" toolTip="{lang('enter the url of your CSV source file e.g. : http://vis.weave.com/MA_municipal_indicators.csv')}"/>
	</ui:Indent>
	<mx:VBox width="100%" enabled="{url.text?false:true}">
		<mx:Label width="100%" textAlign="center" text="OR" fontWeight="bold"/>
		<ui:Indent group="{indentGroup}" label="{lang('Open local CSV file')}">
			<mx:Button label="{lang('Browse')}" click="browseForFiles()"/>
			<mx:Label id="uploadMessage" color="0xFF0000" text="{lang('loaded')}" visible="false"/>
		</ui:Indent>
		<mx:Label width="100%" textAlign="center" text="{lang('OR')}" fontWeight="bold"/>
		<ui:Indent group="{indentGroup}" label="{lang('Paste/Edit CSV Data')}">
			<mx:TextArea id="csvTextArea" change="csvParser.parseCSV(csvTextArea.text)" width="100%" height="100"/>
		</ui:Indent>
		<mx:Button enabled="false" label="{lang('View data in Grid')}" id="showGridButton" click="showGrid()"/>
	</mx:VBox>
	<ui:Indent group="{indentGroup}" label="{lang('Key Column')}">
		<mx:TextInput id="keyColumnName" width="100%" toolTip="{lang('enter the column name that uniquely identifies each row in the data set')}"/>
	</ui:Indent>
	<ui:KeyTypesMenu indent="{indentGroup.measuredIndent}" creationComplete="{if(_csvDataSource)
					 {
					 	(event.target as KeyTypesMenu).addKeyTypeToMenu(_csvDataSource.keyType.value);
					 	(event.target as KeyTypesMenu).selectedItem = _csvDataSource.keyType.value;
					 }}" 
					 id="keyTypeSelector"/>
	<mx:Spacer/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.reportError;
			import weave.data.CSVParser;
			import weave.data.DataSources.CSVDataSource;
			import weave.editors.managers.EditDataGridPanel;
			import weave.ui.BusyIndicator;
			import weave.ui.IndentGroup;
			
			[Bindable] private var indentGroup:IndentGroup = new IndentGroup();
			
			private var busyIndicator:BusyIndicator = new BusyIndicator();
			
			override protected function createChildren():void
			{
				super.createChildren();
				addChild(busyIndicator);
				hideBusy();
				keyTypeSelector.labelText+=" *";
				sourceName.text = Weave.root.generateUniqueName("CSVDataSource");
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
				getCallbackCollection(csvParser).addImmediateCallback(this, handleCSVParser);
			}
			
			
			[Bindable] private var _csvDataSource:CSVDataSource = null;
			public function setTarget(object:ILinkableObject):void
			{
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				_csvDataSource = object as CSVDataSource;
				if (_csvDataSource)
				{
					sourceName.text = Weave.root.getName(_csvDataSource);
					url.text = _csvDataSource.url.value;
					keyColumnName.text = _csvDataSource.keyColName.value;
					keyTypeSelector.addKeyTypeToMenu(_csvDataSource.keyType.value);
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
						
					handleURLTextChange();
					if (!url.text)
					{
						var rows:Array = _csvDataSource.csvData.getSessionState() as Array;
						showGridButton.enabled = rows != null;
						setCSVRows(rows);
					}
				}
			}
			
			public function applyChanges():void
			{
				try
				{
					_csvDataSource.url.value = url.text;
					_csvDataSource.keyColName.value = keyColumnName.text;
					_csvDataSource.keyType.value = keyTypeSelector.selectedItem as String;
					_csvDataSource.csvData.setSessionState(csvRows);
					Alert.show(lang("Changes saved."))
				}
				catch(e:Error)
				{
					Alert.show(lang("Changes could not be saved. ") + e.message,lang("Error"));
				}
			}
			
			
			private var _fileLoader:FileReference = null;
			/**
			* browseForfiles: opens up a file browser window to upload CSV files 
			**/
			private function browseForFiles():void
			{
				if(_fileLoader == null)
				{
					_fileLoader = new FileReference();
					_fileLoader.addEventListener(Event.SELECT, csvFileSelectedHandler);
					_fileLoader.addEventListener(ProgressEvent.PROGRESS, handleProgress);
					_fileLoader.addEventListener(Event.COMPLETE, csvFileLoadCompleteHandler);
					_fileLoader.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
				}
				
				_fileLoader.browse([new FileFilter("CSV", "*.csv")]);
			}
			
			
			// called when parser finishes
			private function handleCSVParser():void
			{
				setCSVRows(csvParser.parseResult);
			}
			private function setCSVRows(rows:Array):void
			{
				csvRows = rows;
				headerArray = csvRows[0];
				//this is showGridButton is disabled only if a file has been loaded as the source
				showGridButton.enabled = true;
				
				//this is set to false because this function might be called from Text Area change.
				uploadMessage.visible = false;
				
				//clearing the Source URL text input
				url.text = "";
				
				hideBusy();
			}
			
			public function getCSVRows():Array
			{
				return csvRows;
			}
			
			private const csvParser:CSVParser = new CSVParser(true);
			private var csvRows:Array = [];
			private var csvRecords:Array = [];
			//this will hold the header columns as was loaded when the data is initially loaded.
			//This is done so that the data gird shows the columns in the same order it was uploaded.
			private var headerArray:Array = [];
			
			private function showGrid():void
			{
				if (csvRows == null)
				{
					Alert.show(lang("No data found"));
					return;
				}
				var grid:EditDataGridPanel = PopUpManager.createPopUp(this, EditDataGridPanel) as EditDataGridPanel;
				
				//Listen for save changes in Data Grid Editor
				grid.saveButton.addEventListener(MouseEvent.CLICK, handleSaveButtonClick);
				
				//Every time we load data into the grid we get the data from the csvDataString and not from csvDataArray. 
				//Because if data is modified in the gird it is saved to the csvDataArray irrespective of whether the user clicks the Save button or not.
				//when data is saved in the Grid it is saved to the csvDataString. When the grid is re-opened, csvDataArray is recreated.  
				//csvDataArray acts as the global object for CSVDataSourceEditor and DataGridEditor to modify the csv data.
				csvRecords = WeaveAPI.CSVParser.convertRowsToRecords(csvRows);
				
				grid.loadData(csvRecords, headerArray);
				
				PopUpManager.bringToFront(grid);
				
				function handleSaveButtonClick(event:MouseEvent):void
				{
					// fix bug that occurs after datagrid validateNow(): it puts in mx_internal_uid values
					for each (var item:Object in csvRecords)
						delete item['mx_internal_uid'];
					
					// get new column order
					headerArray = grid.tableEditor.columns.map(function(col:DataGridColumn, ..._):String { return col.dataField; });
					csvRows = WeaveAPI.CSVParser.convertRecordsToRows(csvRecords, headerArray);
					
					//if the data entered through the text area, clear the text area
					if (csvTextArea.text != "")
						csvTextArea.text = '';
				}
			}
			
			
			private function handleURLTextChange():void
			{
				var hasURL:Boolean = url.text ? true : false;
				uploadMessage.visible = !hasURL;
				showGridButton.enabled = !hasURL;
				csvRows = null;
				csvTextArea.text = '';
			}
			
			private function showBusy():void
			{
				busyIndicator.visible = true;
			}
			private function hideBusy(..._):void
			{
				busyIndicator.visible = false;
			}
			
			private function handleProgress(event:ProgressEvent):void
			{
				WeaveAPI.ProgressIndicator.updateTask(_fileLoader, event.bytesLoaded / event.bytesTotal);
			}
			
			private function csvFileSelectedHandler(event:Event):void
			{
				_fileLoader.load();
				WeaveAPI.ProgressIndicator.addTask(_fileLoader);
				showBusy();
			}
			
			// Show busy indicator until parser finishes (handleCSVParser)
			private function csvFileLoadCompleteHandler(event:Event):void
			{
				// the file extension should be at the end of the file minus the four characters for the extension (i.e. ".csv" )
				var extensionPosition:int = _fileLoader.name.length - 4;
				
				if(_fileLoader.name.search(".csv") == extensionPosition || _fileLoader.name.search(".CSV") == extensionPosition )
				{
					csvParser.parseCSV(_fileLoader.data.toString());
					
					uploadMessage.visible = true;
					
					//clearing the Text Area if any data was pasted before.
					csvTextArea.text="";
					//clearing the Source URL text input
					url.text = "";
				}
				
				WeaveAPI.ProgressIndicator.removeTask(_fileLoader);

				if (_fileLoader.data == null)
				{
					hideBusy();
					return;
				}
			}
			
			private function fileErrorHandler(event:IOErrorEvent):void
			{
				hideBusy();
				var fileRef:FileReference = event.target as FileReference;
				reportError(
					"File upload failed",
					"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text
				);
			}
		]]>
	</mx:Script>
</mx:VBox>