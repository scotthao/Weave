<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
	This is a GUI for SessionStateLog undo and redo.

	@author adufilie
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns="weave.editors.*"
		 click="handleAnyClick();"
		 width="100%" horizontalGap="{padding}" paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}" paddingBottom="{padding}"
		 implements="weave.api.ui.ILinkableObjectEditor">
	<mx:Button width="24" toolTip="{lang('Load session history from a file')}" icon="@Embed(source='/weave/resources/images/folder.png')" click="load()"/> 
	<mx:Button width="24" toolTip="{lang('Save session history to a file')}" icon="@Embed(source='/weave/resources/images/floppy.png')" click="save()"/>
	<mx:Button width="44" id="recordButton" toggle="true" icon="{recordButton.selected ? icon_historyRecordOn : icon_historyRecordOff}"
			   visible="false" includeInLayout="false"
			   click="_stateLog.enableLogging.value = recordButton.selected;"
			   toolTip="Session history recording is {recordButton.selected ? 'enabled' : 'disabled'}."/>
	<mx:Button id="playButton" label="{ getPlayLabel(_playSpeed) }" toggle="true" toolTip="{lang('Replay session history')}" click="if (playButton.selected) play();"/>
	<mx:Button width="24" id="undoButton" click="_stateLog.undo();" toolTip="{lang('Undo')}" icon="@Embed(source='/weave/resources/images/history-undo.png')"/>
	<mx:Button width="24" id="redoButton" click="_stateLog.redo();" toolTip="{lang('Redo')}" icon="@Embed(source='/weave/resources/images/history-redo.png')"/>
	<mx:HSlider id="slider" width="100%" showDataTip="false" liveDragging="true" tickInterval="1" snapInterval="1" minimum="0" change="handleSlider();" mouseDown="slider.getThumbAt(0).setFocus()"/>
	<mx:Button width="24" id="menuButton" icon="@Embed(source='/weave/resources/images/menuLines.png')"/>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.reportError;
			import weave.core.CallbackJuggler;
			import weave.core.SessionStateLog;
			import weave.ui.ExportSessionStatePanel;
			import weave.ui.SubMenu;
			
			private const padding:Number = 4;
			
			private var _stateLog:SessionStateLog = null; // this is the object we are editing
			private const _stateLogJuggler:CallbackJuggler = new CallbackJuggler(this, handleStateLogChange, false);

			[Embed(source='/weave/resources/images/history-record-on.png')]
			private static const icon_historyRecordOn:Class;
			[Embed(source='/weave/resources/images/history-record-off.png')]
			private static const icon_historyRecordOff:Class;

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				_editMenu = new SubMenu(menuButton, [MouseEvent.MOUSE_DOWN], [MouseEvent.MOUSE_DOWN]);
				_editMenu.addSubMenuItem(getPresentationMenuLabel, togglePresentationMode);
				_editMenu.addSubMenuItem(lang("Clear everything"), _stateLog.clearHistory);
				_editMenu.addSubMenuItem(lang("Clear all undos"), _stateLog.clearHistory, [-1]);
				_editMenu.addSubMenuItem(lang("Clear all redos"), _stateLog.clearHistory, [1]);
				_editMenu.addSubMenuItem(getTrimMenuLabel, trim);
				
				_playMenu = new SubMenu(playButton, [MouseEvent.MOUSE_DOWN], [MouseEvent.MOUSE_UP]);
				for each (var speed:int in [1,2,4,8,16])
					_playMenu.addSubMenuItem(speed + 'x', play, [speed]);
				addEventListener(Event.ENTER_FRAME, handleEnterFrame);
			}
			
			private function isRecordingMode():Boolean
			{
				return _stateLog.enableLogging.value;
			}
			
			private function togglePresentationMode():void
			{
				_stateLog.enableLogging.value = !_stateLog.enableLogging.value;
			}
			private function getPresentationMenuLabel():String
			{
				if (_stateLog.enableLogging.value)
					return lang("Switch to presentation mode");
				else
					return lang("Switch to recording mode");
			}
			
			private var _editMenu:SubMenu;
			private var _trimItem:Object;
			private function getTrimMenuLabel():String
			{
				if (_trimItem && (_stateLog.undoHistory.indexOf(_trimItem) >= 0 || _stateLog.redoHistory.indexOf(_trimItem) >= 0))
					return lang("Squash (Mark out)");
				if (_stateLog.undoHistory.length)
					return lang("Squash (Mark in)");
				return '';
			}
			private function trim():void
			{
				var undoLength:int = _stateLog.undoHistory.length;
				if (_trimItem)
				{
					// perform trim
					_stateLog.synchronizeNow();
					
					// TEMPORARY SOLUTION until bookmarks are implemented
					SessionStateLog.enableHistoryRewrite = true;
					
					var i:int = _stateLog.undoHistory.indexOf(_trimItem);
					if (i >= 0)
					{
						_stateLog.squashHistory(i + 1 - undoLength);
					}
					else
					{
						i = _stateLog.redoHistory.indexOf(_trimItem);
						if (i >= 0)
						{
							_stateLog.squashHistory(i + 1);
						}
					}
					_trimItem = null;
				}
				else if (undoLength)
				{
					// begin trim
					
					// TEMPORARY SOLUTION until bookmarks are implemented
					SessionStateLog.enableHistoryRewrite = false; // prevents the _trimItem from being replaced in the history
					
					_trimItem = _stateLog.undoHistory[undoLength - 1];
				}
			}
			
			private var _playMenu:SubMenu;
			[Bindable] private var _playSpeed:uint = 1;
			private var _lastReplayTime:int = 0;
			private var _maxStepDelay:int = 1000;
			
			private function getPlayLabel(playSpeed:uint):String
			{
				return playSpeed == 1 ? lang('Replay') : lang('Replay ({0}x)', playSpeed);
			}
			private function play(speed:int = 0):void
			{
				playButton.selected = true;
				if (speed)
					_playSpeed = speed;
				// if at end, restart from beginning
				if (_stateLog.redoHistory.length == 0)
					_stateLog.undo(int.MAX_VALUE);
			}
			private function handleEnterFrame(event:Event):void
			{
				if (playButton.selected)
				{
					var mouseDown:Boolean = WeaveAPI.StageUtils.mouseButtonDown;
					if (_stateLog.redoHistory.length)
					{
						// always read the current delay value because it may change due to undo/redo while playing
						var entry:Object = _stateLog.redoHistory[0];
						var delay:int = entry.triggerDelay + entry.diffDuration;
						// wait until delay has passed
						if (getTimer() < _lastReplayTime + Math.min(delay / _playSpeed, _maxStepDelay))
							return;
						// wait until background tasks complete
						if (WeaveAPI.ProgressIndicator.getTaskCount() > 0)
							return;
						// pause while mouse button is pressed
						if (!mouseDown)
						{
							_stateLog.redo();
							// save current time as reference point
							_lastReplayTime = getTimer();
						}
					}
					else if (!mouseDown)
					{
						// stop playing
						playButton.selected = false;
					}
				}
			}
			
			/**
			 * @inheritDoc
			 */
			public function setTarget(object:ILinkableObject):void
			{
				_stateLogJuggler.target = _stateLog = object as SessionStateLog;
			}
			
			/**
			 * @inheritDoc
			 */
			public function applyChanges():void
			{
				// do nothing because changes are applied immediately.
			}
			
			// called when anything is clicked
			private function handleAnyClick():void
			{
				// hack so slider doesn't disappear
				Weave.properties.showSessionHistoryControls.value = true;
			}
			
			// called when slider value changes
			private function handleSlider():void
			{
				var delta:int = slider.value - _stateLog.undoHistory.length;
				if (delta < 0)
					_stateLog.undo(-delta);
				else
					_stateLog.redo(delta);
				
				// hack so slider doesn't disappear
				handleAnyClick();
			}
			
			// called when state log changes
			private function handleStateLogChange():void
			{
				if (!parent)
				{
					callLater(handleStateLogChange);
					return;
				}
				recordButton.selected = _stateLog.enableLogging.value;
				slider.maximum = _stateLog.undoHistory.length + _stateLog.redoHistory.length;
				slider.value = _stateLog.undoHistory.length;
				slider.enabled = slider.maximum > slider.minimum;
				undoButton.enabled = _stateLog.undoHistory.length > 0;
				redoButton.enabled = _stateLog.redoHistory.length > 0;
				// save current time as reference point
				_lastReplayTime = getTimer();
			}
			
			private var _weaveFileRef:FileReference = null;
			private function load():void
			{
				if (!_weaveFileRef)
				{
					_weaveFileRef = new FileReference();
					_weaveFileRef.addEventListener(IOErrorEvent.IO_ERROR, reportError);
					_weaveFileRef.addEventListener(
						Event.SELECT,
						function (e:Event):void
						{
							_weaveFileRef.load();
						}
					);
					_weaveFileRef.addEventListener(
						Event.COMPLETE,
						function (e:Event):void
						{
							// TEMPORARY SOLUTION
							WeaveAPI.topLevelApplication.visApp.loadSessionState(e.target.data, _weaveFileRef.name);
						}
					);
				}
				_weaveFileRef.browse([
					new FileFilter("Weave file", "*.weave"),
					new FileFilter("All files", "*")
				]);
			}
			
			private function save():void
			{
				// TEMPORARY SOLUTION
				var exportSessionStatePanel:ExportSessionStatePanel = new ExportSessionStatePanel();
				exportSessionStatePanel = PopUpManager.createPopUp(this,ExportSessionStatePanel,false) as ExportSessionStatePanel;
				PopUpManager.centerPopUp(exportSessionStatePanel);
			}
		]]>
	</mx:Script>
</mx:HBox> 
