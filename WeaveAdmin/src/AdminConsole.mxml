<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="#7B96B6" creationComplete="handleCreationComplete()" creationPolicy="all" xmlns:managers="weave.ui.admin.managers.*" xmlns:admin="weave.ui.admin.*" xmlns:ui="weave.ui.*">
	<mx:Style>
		{ fillAlphas: 1, 1, 1, 1; }
	</mx:Style>
	<mx:Panel
		headerHeight="25"
		title="Administration Console for Weave {version}"
		width="100%"
		height="100%"
		borderAlpha="0.5" backgroundColor="#DBDBDB"
		bottom="10" top="10" right="10" left="10"
		paddingLeft="8" paddingRight="8" paddingTop="8" paddingBottom="8">
		<mx:VDividedBox width="100%" height="100%">
			<mx:ViewStack width="100%" height="100%" selectedIndex="{Admin.service.initialized ? (Admin.instance.userHasAuthenticated ? MAIN_VIEW : (Admin.instance.databaseConfigExists ? LOGIN_VIEW : SETUP_VIEW)) : MIGRATE_VIEW}">
				
				<!-- main interface -->
				<mx:VBox width="100%" height="100%">
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:Label fontWeight="bold" text="Import data:"/>
						<mx:Button label="SQL" click="WizardPanel.createWizard(this, new SQLImportWizard())" toolTip="{lang('This publishes an existing SQL table through the Weave server. This will not create any new tables in the database. This will just allow Weave users to access the data.')}"/>
						<mx:Button label="CSV" click="WizardPanel.createWizard(this, new CSVImportWizard())" toolTip="{lang('This uploads and publishes data from a CSV file on your computer.')}"/>
						<mx:Button label="SHP + DBF" click="WizardPanel.createWizard(this, new SHPImportWizard())" toolTip="{lang('This uploads and publishes shape data from files on your computer.')}"/>
						
						<mx:HRule width="100%"/>
						
						<mx:Button label="Open Weave" click="Admin.instance.openWeavePopup();" toolTip="This will open Weave in a new browser window which allows you to save a new client configuration."/>
						<mx:Button label="Recover Last Session" click="Admin.instance.openWeavePopup(null, true);" toolTip="This will open Weave with your last configuration."/>
						
						<mx:HRule width="100%"/>
						
						<mx:Label text="{'Signed in as: ' + Admin.instance.activeConnectionName}" textAlign="right"/>
						<mx:Button label="Sign out" enabled="{Admin.instance.databaseConfigExists == true}"
								   click="Admin.instance.activeConnectionName = Admin.instance.activePassword = '';"/>
					</mx:HBox>
					<mx:HRule width="100%"/>
					<mx:TabNavigator tabWidth="160" id="tabNavigator" width="100%" height="100%" paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8" fontSize="10">
						<managers:ClientConfigurationManager id="clientConfigManager"/>
						<managers:MetadataManager id="metadataManager"/>
						<managers:SQLConnectionManager id="sqlConnectionManager"/>
					</mx:TabNavigator>
					<mx:HBox id="resdHacks" visible='false' includeInLayout="false" width="100%">
						<mx:Spacer width="100%"/>
						<mx:Button label="{lang('ACS Header Tool')}" click='openAcsHeaderTool()'/>
						<mx:Button label="{lang('Edit translations')}" click="DraggablePanel.openStaticInstance(TranslationPanel);"/>
					</mx:HBox>
				</mx:VBox>
				
				<!-- login interface -->
				<mx:Box horizontalAlign="center" verticalAlign="middle" show="login.connectionInput.setFocus()">
					<admin:LoginPopup id="login"/>
				</mx:Box>
				
				<!-- first time setup interface -->
				<mx:VBox>
					<ui:AutoResizingTextArea id="firstTimeTextArea" text="Before you can continue, you must set up at least one database connection and specify where to store Weave configuration information." editable="false" wordWrap="true" width="100%" backgroundAlpha="0" borderStyle="none" selectable="false"/>
					<managers:SQLConnectionManager/>
				</mx:VBox>
				
				<!-- old version migration interface -->
	            <mx:VBox>
	                <admin:MigrationPanel width="100%" height="100%"/>
	            </mx:VBox>
				
			</mx:ViewStack>
			<mx:TextArea id="messageTextArea" editable="false"
						 width="100%" height="0%" visible="{messageTextArea.height > 0}"
						 keyDown="if (event.keyCode == Keyboard.DELETE) WeaveAdminService.clearMessageLog(); messageTextArea.height = 0;"/>
		</mx:VDividedBox>
	</mx:Panel>
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.getCallbackCollection;
			import weave.services.Admin;
			import weave.services.WeaveAdminService;
			import weave.ui.DraggablePanel;
			import weave.ui.SessionStateEditor;
			import weave.ui.TranslationPanel;
			import weave.ui.WeaveProgressBar;
			import weave.ui.admin.LoginPopup;
			import weave.ui.admin.WizardPanel;
			import weave.ui.admin.wizards.CSVImportWizard;
			import weave.ui.admin.wizards.SHPImportWizard;
			import weave.ui.admin.wizards.SQLImportWizard;

			private const MAIN_VIEW:int = 0;
			private const LOGIN_VIEW:int = 1;
			private const SETUP_VIEW:int = 2;
            private const MIGRATE_VIEW:int = 3;
			
			SessionStateEditor.getInstance(); // adds keyboard shortcut f8 to open console
			
			private var _weaveTrace:Function = weaveTraceImpl; // reference this here so it gets compiled
			
			private static const version:String = Weave.properties.version.value;
			private var loginPopup:LoginPopup;
			
			private function handleCreationComplete():void
			{
				WeaveAdminService.messageLogCallbacks.addImmediateCallback(this, handleMessageLog, true);
				function handleMessageLog():void
				{
					
					messageTextArea.text = WeaveAdminService.messageLog.join('\n\n');
					messageTextArea.validateProperties();
					messageTextArea.verticalScrollPosition = messageTextArea.maxVerticalScrollPosition;
					if (WeaveAdminService.messageLog.length && messageTextArea.height < 64)
					{
						// Set height explicitly because if we set percentHeight and then
						// the user resizes the division, the percentHeight will be ignored.
						messageTextArea.height = 128;
					}
				}

				BindingUtils.bindSetter(handleConnectionChange, Admin.instance, "activeConnectionName");
				function handleConnectionChange(name:String):void
				{
					resdHacks.visible = resdHacks.includeInLayout = (name == 'resd');
				}
				
				BindingUtils.bindSetter(handlePermissionChange, Admin.instance, "currentUserIsSuperuser");
				function handlePermissionChange(isSuperuser:Boolean):void
				{
					if (isSuperuser != (tabNavigator == sqlConnectionManager.parent))
					{
						if (isSuperuser)
						{
							tabNavigator.addChild(sqlConnectionManager);
						}
						else
						{
							tabNavigator.removeChild(sqlConnectionManager);
						}
					}
				}
				
				PopUpManager.createPopUp(this, WeaveProgressBar);
				getCallbackCollection(Admin.entityCache).addImmediateCallback(this, handleEntityCache);
			}
			
			private function handleEntityCache():void
			{
				if (Admin.instance.getFocusEntityId() != -1)
					tabNavigator.selectedChild = metadataManager;
			}
			
			private function openAcsHeaderTool():void
			{
				ExternalInterface.call('window.open("http://demo.oicweave.org/HeaderTool.swf", "_blank")');
			}
		]]>
	</mx:Script>
</mx:Application>
