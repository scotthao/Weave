<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off" 
		 xmlns="weave.ui.admin.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%"
		 creationComplete="getSchemas()"
		 xmlns:ui="weave.ui.*">
	<ui:IndentGroup id="indentGroup"/>
	<ui:Indent group="{indentGroup}" label="{lang('SQL schema')}">
		<ui:CustomComboBox id="schemaInput"
						   enabled="{schemaInput.dataProvider.length > 0}"
						   prompt="{lang('Select a schema...')}"
						   text="{activeSchema}"
						   dataProvider="{schemas}"
						   change="activeSchema = schemaInput.text;"/>
		<mx:Button id="schemasRefreshButton"
				   label="{lang('Refresh')}"
				   click="getSchemas()"/>
	</ui:Indent>
	<ui:Indent id="tableControls" group="{indentGroup}" label="{lang('SQL table')}">
		<ui:CustomComboBox id="_tableCombo"
						   enabled="{_tableCombo.dataProvider.length > 0}"
						   prompt="{lang('Select a table...')}"
						   text="{activeTable}"
						   dataProvider="{tables}"
						   change="activeTable = _tableCombo.text;"
						   toolTip="{lang('Tables shown in this dropdown menu are those that exist in the schema selected above.')}"/>
		<mx:Button id="tablesRefreshButton"
				   label="{lang('Refresh')}"
				   enabled="{schemaInput.selectedIndex >= 0 &amp;&amp; !refreshingTables}"
				   click="getTables()"/>
		<ui:TextInputWithPrompt id="_tableInput"
								editable="true"
								text="{activeTable}"
								prompt="{lang('Enter a table name')}"
								change="activeTable = _tableInput.text;"/>
		<mx:CheckBox id="tableOverwriteCheck"
					 label="{lang('Overwrite SQL table')}"
					 selected="false"
					 visible="{tableOverwriteCheckVisible}"
					 includeInLayout="{tableOverwriteCheckVisible}"/>
	</ui:Indent>
	<mx:Metadata>
		[Event(name="propertyChange", type="flash.events.Event")]
		[Exclude(name="_tableCombo", kind="property")]
		[Exclude(name="_tableInput", kind="property")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			
			import weave.services.Admin;
			import weave.services.addAsyncResponder;
			
			// values returned by the server that depend on the active selected values
			[Bindable] public var schemas:Array = [];
			[Bindable] public var tables:Array = [];
			[Bindable] public var columns:Array = [];
			
			[Bindable] public var tableOverwriteCheckVisible:Boolean = true;
			[Bindable] public var showTableCombo:Boolean = true;

			private var _activeSchema:String = ""; // has corresponding public setter/getter
			private var _activeTable:String = ""; // has corresponding public setter/getter
			[Bindable] private var refreshingTables:Boolean = false;

			override protected function initializationComplete():void
			{
				super.initializationComplete();
				
				if (showTableCombo)
				{
					tableControls.removeChild(_tableInput);
				}
				else
				{
					tableControls.removeChild(_tableCombo);
					tableControls.removeChild(tablesRefreshButton);
				}
			}

			public function getSchemas():void
			{
				activeSchema = '';
				// clear current list, then request new list
				schemas = [];
				addAsyncResponder(
					Admin.service.getSQLSchemaNames(),
					handler,
					handler
				);
				
				schemasRefreshButton.enabled = false;
				function handler(event:Event, token:Object = null):void
				{
					if (event is ResultEvent)
						schemas = (event as ResultEvent).result as Array;
					schemasRefreshButton.enabled = true;
				}
			}
			
			[Bindable] public function get activeSchema():String
			{
				return _activeSchema;
			}
			public function set activeSchema(value:String):void
			{
				if (_activeSchema != value)
				{
					_activeSchema = value;
					getTables();
				}
			}
			
			public function getTables():void
			{
				if (!showTableCombo)
					return;
				
				activeTable = '';
				// clear current list, then request new list
				tables = [];
				if (activeSchema != '')
				{
					addAsyncResponder(
						Admin.service.getSQLTableNames(activeSchema),
						handler,
						handler
					);
					
					refreshingTables = true;
					function handler(event:Event, token:Object = null):void
					{
						if (event is ResultEvent)
							tables = (event as ResultEvent).result as Array;
						refreshingTables = false;
					}
				}
				
			}
			
			[Bindable] public function get activeTable():String
			{
				return _activeTable;
			}
			public function set activeTable(value:String):void
			{
				if (_activeTable != value)
				{
					_activeTable = value;
					getColumns();
				}
			}
			
			public function getColumns():void
			{
				if (!showTableCombo)
					return;
				
				// clear current list, then request new list
				columns = [];
				if (activeSchema != '' && activeTable != '')
				{
					addAsyncResponder(
						Admin.service.getSQLColumnNames(activeSchema, activeTable),
						handleGetColumns
					);
				}
				
				function handleGetColumns(event:ResultEvent, token:Object = null):void
				{
					columns = event.result as Array;
				}
			}
		]]>
	</mx:Script>
</mx:VBox>
