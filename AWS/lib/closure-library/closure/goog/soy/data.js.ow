/**
 * @fileoverview Soy data primitives.
 *
 * The goal is to encompass data types used by Soy, especially to mark content
 * as known to be "safe".
 *
 * @author gboyer@google.com (Garrett Boyer)
 */goog.provide("goog.soy.data");
goog.provide("goog.soy.data.SanitizedContent");
goog.provide("goog.soy.data.SanitizedContentKind");
/**
 * A type of textual content.
 *
 * This is an enum of type Object so that these values are unforgeable.
 *
 * @enum {!Object}
 */
goog.soy.data.SanitizedContentKind = {HTML:goog.DEBUG ? {sanitizedContentKindHtml:true} : {}, JS:goog.DEBUG ? {sanitizedContentJsStrChars:true} : {}, JS_STR_CHARS:goog.DEBUG ? {sanitizedContentJsStrChars:true} : {}, URI:goog.DEBUG ? {sanitizedContentUri:true} : {}, ATTRIBUTES:goog.DEBUG ? {sanitizedContentHtmlAttribute:true} : {}, CSS:goog.DEBUG ? {sanitizedContentCss:true} : {}, TEXT:goog.DEBUG ? {sanitizedContentKindText:true} : {}};
/**
 * A string-like object that carries a content-type.
 *
 * IMPORTANT! Do not create these directly, nor instantiate the subclasses.
 * Instead, use a trusted, centrally reviewed library as endorsed by your team
 * to generate these objects. Otherwise, you risk accidentally creating
 * SanitizedContent that is attacker-controlled and gets evaluated unescaped in
 * templates.
 *
 * @constructor
 */
goog.soy.data.SanitizedContent = function() {
  throw Error("Do not instantiate directly");
};
/**
 * The context in which this content is safe from XSS attacks.
 * @type {goog.soy.data.SanitizedContentKind}
 */
goog.soy.data.SanitizedContent.prototype.contentKind;
/**
 * The already-safe content.
 * @type {string}
 */
goog.soy.data.SanitizedContent.prototype.content;
/** @override */
goog.soy.data.SanitizedContent.prototype.toString = function() {
};
